{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","models/ability.ts","models/class/class.primary.ts","models/savingThrow.ts","analytics/reportWebVitals.ts","components/build/table/TableCell.tsx","components/build/table/TableRow.tsx","components/build/table/TableSelect.tsx","components/build/abilityScores/AbilityScoreCell.tsx","components/build/abilityScores/AbilityScoreCellArray.tsx","components/build/class/ClassCell.tsx","components/build/level/StatProgressionArray.tsx","components/build/level/LevelRow.tsx","components/build/BuildTable.tsx","assets/sheet.jpg","components/character/Field.tsx","components/character/BaseAbilityScores.tsx","components/character/CharacterRace.tsx","components/character/BaseInformation.tsx","components/character/CharacterSheet.tsx","App/Nav.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","getPrimaryClass","data","primary","archetypes","map","id","mergeClassArchetypes","archetype","base","primaryClasses","alchemist","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","selectedBuildState","buildState","atomFamily","selectorFamily","identifier","find","characterListState","selectedCharacterState","characterState","character","name","Error","classListState","primaryClassListSelector","filter","c","archetypeListSelector","prestigeClassListSelector","maxLevel","classState","cl","archetypesState","baseId","raceListState","baseRaceListSelector","r","raceHeritageListSelector","raceState","allRaces","race","baseRace","racialHeritagesState","getAbilityName","ability","resolveAbilityScoreModifier","score","Math","floor","BaseAttackBonusProgression","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","SavingThrowProgression","onPerfEntry","calculateSavingThrowBonus","levels","progression","Low","High","PrestigeLow","ceil","PrestigeHigh","TableCell","td","disabled","css","TableRow","tr","TableSelect","select","bonusColour","penaltyColour","selectedColour","Score","bonus","penalty","selected","Button","button","AbilityScoreCell","onSelect","onClick","tabIndex","AbilityScoreCellArray","abilityScores","abilityScoreIncreases","bonuses","choice","level","updateBuild","changeAbilityScoreIncrease","useCallback","hasBonus","racial","hasPenalty","Object","keys","ClassCell","onChange","useRecoilValue","hasArchetypes","length","width","value","e","parseInt","target","StatCell","StatProgressionArray","classIds","modifiers","uniqueClasses","includes","calculateStats","stats","baseAttackBonus","fortitude","reflex","will","classLevels","classId","bab","calculateBaseAttackBonus","fort","ref","useMemo","LevelCell","LevelRow","feats","general","bonus1","bonus2","currentClass","getClassLevel","classLevel","racialLevelOneIncrease","abilityScoreChoiceIncrease","racialAbilityScoreIncreases","calculateAbilityScore","racialAbilityIncrease","levelOneIncrease","regularIncreases","calculatedAbilityScores","acc","calculateAbilityScores","savingThrowModifiers","con","dex","wis","newClassId","Table","table","BuildTable","buildId","raceId","useRecoilState","build","setBuild","skills","console","log","getClassesAtLevel","values","slice","getAbilityScoreIncreasesAtLevel","increases","iLevel","a","toUpperCase","colSpan","entries","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","updateCharacter","newValue","getModForAbility","getIncreaseAsString","increase","Array","from","_","n","htmlFor","CharacterRace","heritages","hasRacialHeritages","InformationSection","section","BaseInformation","useState","nameVal","setNameVal","changeRace","newRaceId","handleKeyDown","type","placeholder","onKeyDown","Number","Sheet","article","sheet","CharacterSheet","setCharacter","Nav","useSetRecoilState","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.56f1691c.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\nimport lann from './lann.character.json';\n\nexport const characters = [\n  seelah,\n  lann,\n];\n","import { Archetype, Class, PrimaryClass } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\nconst getPrimaryClass = (\n  data: {\n    primary: Class,\n    archetypes: Partial<Archetype>[],\n  },\n): PrimaryClass => ({\n  ...data.primary,\n  archetypes: data.archetypes.map(({ id }) => id as number),\n});\n\nconst mergeClassArchetypes = (\n  primary: Class,\n  archetypes: Partial<Archetype>[],\n): Archetype[] => (\n  archetypes.map(archetype => (\n    {\n      base: primary.id,\n      ...primary,\n      ...archetype,\n    }\n  ))\n);\n\nexport const primaryClasses: PrimaryClass[] = [\n  getPrimaryClass(alchemist),\n  getPrimaryClass(arcanist),\n  getPrimaryClass(barbarian),\n  getPrimaryClass(bard),\n  getPrimaryClass(bloodrager),\n  getPrimaryClass(cavalier),\n  getPrimaryClass(cleric),\n  getPrimaryClass(druid),\n  getPrimaryClass(fighter),\n  getPrimaryClass(hunter),\n  getPrimaryClass(inquisitor),\n  getPrimaryClass(kineticist),\n  getPrimaryClass(magus),\n  getPrimaryClass(monk),\n  getPrimaryClass(oracle),\n  getPrimaryClass(paladin),\n  getPrimaryClass(ranger),\n  getPrimaryClass(rogue),\n  getPrimaryClass(shaman),\n  getPrimaryClass(skald),\n  getPrimaryClass(slayer),\n  getPrimaryClass(sorcerer),\n  getPrimaryClass(warpriest),\n  getPrimaryClass(witch),\n  getPrimaryClass(wizard),\n];\n\nexport const archetypes: Archetype[] = [\n  ...mergeClassArchetypes(alchemist.primary, alchemist.archetypes),\n  ...mergeClassArchetypes(arcanist.primary, arcanist.archetypes),\n  ...mergeClassArchetypes(barbarian.primary, barbarian.archetypes),\n  ...mergeClassArchetypes(bard.primary, bard.archetypes),\n  ...mergeClassArchetypes(bloodrager.primary, bloodrager.archetypes),\n  ...mergeClassArchetypes(cavalier.primary, cavalier.archetypes),\n  ...mergeClassArchetypes(cleric.primary, cleric.archetypes),\n  ...mergeClassArchetypes(druid.primary, druid.archetypes),\n  ...mergeClassArchetypes(fighter.primary, fighter.archetypes),\n  ...mergeClassArchetypes(hunter.primary, hunter.archetypes),\n  ...mergeClassArchetypes(inquisitor.primary, inquisitor.archetypes),\n  ...mergeClassArchetypes(kineticist.primary, kineticist.archetypes),\n  ...mergeClassArchetypes(magus.primary, magus.archetypes),\n  ...mergeClassArchetypes(monk.primary, monk.archetypes),\n  ...mergeClassArchetypes(oracle.primary, oracle.archetypes),\n  ...mergeClassArchetypes(paladin.primary, paladin.archetypes),\n  ...mergeClassArchetypes(ranger.primary, ranger.archetypes),\n  ...mergeClassArchetypes(rogue.primary, rogue.archetypes),\n  ...mergeClassArchetypes(shaman.primary, shaman.archetypes),\n  ...mergeClassArchetypes(skald.primary, skald.archetypes),\n  ...mergeClassArchetypes(slayer.primary, slayer.archetypes),\n  ...mergeClassArchetypes(sorcerer.primary, sorcerer.archetypes),\n  ...mergeClassArchetypes(warpriest.primary, warpriest.archetypes),\n  ...mergeClassArchetypes(witch.primary, witch.archetypes),\n  ...mergeClassArchetypes(wizard.primary, wizard.archetypes),\n];\n","import { PrestigeClass } from '../../../../models';\nimport aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses: PrestigeClass[] = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { archetypes, primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses, ...archetypes,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const selectedBuildState = atom<number>({\n  key: 'selectedBuild/state',\n  default: 0,\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const selectedCharacterState = atom<number>({\n  key: 'selectedCharacter/state',\n  default: 0,\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Archetype, Class, PrestigeClass, PrimaryClass } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const primaryClassListSelector = selector<PrimaryClass[]>({\n  key: 'primaryClassList/selector',\n  get: ({ get }) => (get(classListState) as PrimaryClass[]).filter(c => c.archetypes),\n});\n\nexport const archetypeListSelector = selector<Archetype[]>({\n  key: 'archetypeList/selector',\n  get: ({ get }) => (get(classListState) as Archetype[]).filter(c => c.base),\n});\n\nexport const prestigeClassListSelector = selector<PrestigeClass[]>({\n  key: 'prestigeClassList/selector',\n  get: ({ get }) => (get(classListState) as PrestigeClass[]).filter(c => c.maxLevel),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const cl = get(classListState).find(({ id }) => id === identifier);\n      if (cl) return cl;\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const archetypesState = atomFamily<Archetype[], number>({\n  key: 'archetypes/state',\n  default: selectorFamily<Archetype[], number>({\n    key: 'archetypes/selector',\n    get: baseId => ({ get }) => get(archetypeListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const allRaces = get(raceListState);\n      const race = allRaces.find(({ id }) => id === identifier);\n\n      if (race) {\n        const base = (race as Heritage).base;\n        if (!base) return race;\n\n        const baseRace = allRaces.find(({ id }) => id === base);\n        return {\n          ...baseRace,\n          ...race,\n        };\n      }\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const racialHeritagesState = atomFamily<Heritage[], number>({\n  key: 'racialHeritages/state',\n  default: selectorFamily<Heritage[], number>({\n    key: 'racialHeritages/selector',\n    get: baseId => ({ get }) => get(raceHeritageListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","export type Ability = 'str' | 'dex' | 'con' | 'int' | 'wis' | 'cha';\n\nexport type AbilityScores = Record<Ability, number>;\n\nexport const getAbilityName = (ability: Ability): string => {\n  switch (ability) {\n    case 'str': return 'strength';\n    case 'dex': return 'dexterity';\n    case 'con': return 'constitution';\n    case 'int': return 'intelligence';\n    case 'wis': return 'wisdom';\n    case 'cha': return 'charisma';\n  }\n};\n\nexport const resolveAbilityScoreModifier = (score: number): number => Math.floor((score - 10) / 2);\n","import { ClassLevel, Levels } from '../level';\nimport { SavingThrowProgression } from '../savingThrow';\nimport { Prerequisite } from './class.prerequisite';\n\nexport enum BaseAttackBonusProgression {\n  Half = 0.5,\n  Average = 0.75,\n  Full = 1,\n}\n\nexport interface Class {\n  id: number;\n  name: string;\n  levels: Levels<ClassLevel>;\n  progression: {\n    baseAttackBonus: BaseAttackBonusProgression;\n    fortitude: SavingThrowProgression;\n    reflex: SavingThrowProgression;\n    will: SavingThrowProgression;\n  };\n  prerequisites?: Prerequisite[];\n}\n\nexport interface PrimaryClass extends Class {\n  archetypes: number[];\n}\n\nexport const calculateBaseAttackBonus = (\n  levels: number,\n  progression: BaseAttackBonusProgression,\n): number => Math.floor(levels * progression);\n","export type SavingThrow = 'fort' | 'ref' | 'will';\n\nexport enum SavingThrowProgression {\n  Low,\n  High,\n  PrestigeLow,\n  PrestigeHigh,\n}\n\nexport const calculateSavingThrowBonus = (\n  levels: number,\n  progression: SavingThrowProgression,\n): number => {\n  switch (progression) {\n    case SavingThrowProgression.Low:\n      return Math.floor(levels / 3);\n\n    case SavingThrowProgression.High:\n      return Math.floor(levels / 2) + 2;\n\n    case SavingThrowProgression.PrestigeLow:\n      return Math.ceil(levels / 2);\n\n    case SavingThrowProgression.PrestigeHigh:\n      return Math.ceil(levels / 3);\n  }\n};\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  font-size: ${rem(13)};\n\n  ${({ disabled }) => disabled && css`\n    border: ${rem(1)} solid #e6e1dd;\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell, TableCellProps } from '../table';\n\nconst bonusColour = '#969d76';\nconst penaltyColour = '#ba847c';\nconst selectedColour = '#926a82';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  penalty?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  line-height: 1;\n  text-align: center;\n  width: ${rem(21)};\n\n  ${({ bonus }) => bonus && css`\n    background: ${bonusColour};\n    color: white;\n  `}\n\n  ${({ penalty }) => penalty && css`\n    background: ${penaltyColour};\n    color: white;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: ${selectedColour};\n    border: ${rem(1)} inset #aca195;\n    color: white;\n  `}\n\n  ${({ bonus, penalty, selected }) => (bonus || penalty) && selected && css`\n    background: -webkit-linear-gradient(\n      145deg, ${bonus ? bonusColour : penaltyColour} 30%, ${selectedColour} 40%\n    );\n  `}\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: ${({ disabled }) => disabled ? 'default' : 'pointer'};\n`;\n\nexport interface AbilityScoreCellProps extends ScoreProps {\n  score: number;\n  title: string;\n  onSelect?: () => void;\n}\n\nexport const AbilityScoreCell: FC<AbilityScoreCellProps> = ({\n  score,\n  title,\n  bonus,\n  penalty,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    aria-label={`${title}, ${score}`}\n    title={title}\n    bonus={bonus}\n    penalty={penalty}\n    disabled={disabled}\n    selected={selected}\n  >\n    <Button\n      disabled={disabled}\n      onClick={() => onSelect && onSelect()}\n      tabIndex={disabled ? -1 : 0}\n    >\n      {score}\n    </Button>\n  </Score>\n);\n","import React, { FC, useCallback } from 'react';\n\nimport { Ability, AbilityScores, Build, getAbilityName } from '../../../models';\nimport { AbilityScoreCell } from './AbilityScoreCell';\n\nexport interface AbilityScoreCellArrayProps {\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  bonuses?: Partial<AbilityScores>\n  choice?: boolean;\n  level: number;\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const AbilityScoreCellArray: FC<AbilityScoreCellArrayProps> = ({\n  abilityScores,\n  abilityScoreIncreases,\n  bonuses,\n  choice,\n  level,\n  updateBuild,\n}) => {\n  const changeAbilityScoreIncrease = useCallback((ability: Ability): void => {\n    updateBuild({\n      abilityScoreIncreases: {\n        [level]: ability,\n      },\n    });\n  }, [abilityScoreIncreases, level]);\n\n  const hasBonus = useCallback((ability: Ability): boolean => {\n    if (level === 1 && bonuses) {\n      const racial = bonuses[ability];\n      if (racial && racial > 0) return true;\n    }\n\n    return false;\n  }, [bonuses]);\n\n  const hasPenalty = useCallback((ability: Ability): boolean => {\n    if (level === 1 && bonuses) {\n      const racial = bonuses[ability];\n      if (racial && racial < 0) return true;\n    }\n\n    return false;\n  }, [bonuses]);\n\n  return (\n    <>\n      {(Object.keys(abilityScores) as Ability[]).map(ability => choice\n        ? (\n          <AbilityScoreCell\n            key={ability}\n            title={getAbilityName(ability)}\n            score={abilityScores[ability]}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={choice}\n          />\n        ) : (\n          <AbilityScoreCell\n            key={ability}\n            title={getAbilityName(ability)}\n            score={abilityScores[ability]}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={choice}\n            selected={abilityScoreIncreases[level] === ability}\n            onSelect={() => changeAbilityScoreIncrease(ability)}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Archetype, Class } from '../../../models';\nimport {\n  archetypesState,\n  prestigeClassListSelector,\n  primaryClassListSelector,\n} from '../../../state';\nimport { TableCell, TableSelect } from '../table';\n\nexport interface ClassCellProps {\n  cl: Class;\n  classLevel: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassCell: FC<ClassCellProps> = ({ cl, onChange }) => {\n  const { id } = cl;\n  const base = (cl as Archetype).base || id;\n  const primaryClasses = useRecoilValue(primaryClassListSelector);\n  const archetypes = useRecoilValue(archetypesState(base));\n  const prestigeClasses = useRecoilValue(prestigeClassListSelector);\n  const hasArchetypes = archetypes.length > 0;\n\n  return (\n    <>\n      <TableCell width={120}>\n        <TableSelect\n          name=\"class\"\n          value={base}\n          onChange={e => onChange && onChange(parseInt(e.target.value) || id)}\n        >\n          <option />\n          {[...primaryClasses, ...prestigeClasses].map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </TableSelect>\n      </TableCell>\n      <TableCell disabled={!hasArchetypes} width={200}>\n        {hasArchetypes && (\n          <TableSelect\n            name=\"archetype\"\n            value={id}\n            onChange={({ target: { value }}) => onChange && onChange(parseInt(value) || base)}\n          >\n            <option />\n            {archetypes.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </TableSelect>\n        )}\n      </TableCell>\n    </>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { calculateBaseAttackBonus, calculateSavingThrowBonus, SavingThrow } from '../../../models';\nimport { classListState } from '../../../state';\nimport { TableCell } from '../table';\n\nconst StatCell = styled(TableCell)`\n  border: 0;\n  text-align: center;\n  width: ${rem(21)};\n`;\n\nexport interface StatProgressionArrayProps {\n  classIds: number[];\n  modifiers: Record<SavingThrow, number>;\n}\n\nexport const StatProgressionArray: FC<StatProgressionArrayProps> = ({ classIds, modifiers }) => {\n  const uniqueClasses = useRecoilValue(classListState).filter(({ id }) => (\n    classIds.includes(id)\n  ));\n\n  const calculateStats = useCallback(() => (\n    uniqueClasses.reduce((stats, { id, progression }) => {\n      const { baseAttackBonus, fortitude, reflex, will } = progression;\n      const classLevels = classIds.filter(classId => id === classId).length;\n      stats.bab += calculateBaseAttackBonus(classLevels, baseAttackBonus);\n      stats.fort += calculateSavingThrowBonus(classLevels, fortitude);\n      stats.ref += calculateSavingThrowBonus(classLevels, reflex);\n      stats.will += calculateSavingThrowBonus(classLevels, will);\n      return stats;\n    }, {\n      ...modifiers,\n      bab: 0,\n    })\n  ), [classIds, modifiers, uniqueClasses]);\n\n  const { bab, fort, ref, will } = useMemo(() => calculateStats(), [calculateStats]);\n\n  return (\n    <>\n      <StatCell aria-label={`base attack bonus, ${bab}`} title=\"base attack bonus\">\n        {bab}\n      </StatCell>\n      <StatCell aria-label={`fortitude, ${fort}`} title=\"fortitude\">\n        {fort}\n      </StatCell>\n      <StatCell aria-label={`reflex, ${ref}`} title=\"reflex\">\n        {ref}\n      </StatCell>\n      <StatCell aria-label={`will, ${will}`} title=\"will\">\n        {will}\n      </StatCell>\n    </>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { Ability, AbilityScores, Build, Race, resolveAbilityScoreModifier } from '../../../models';\nimport { classState } from '../../../state';\nimport { AbilityScoreCellArray } from '../abilityScores';\nimport { ClassCell } from '../class';\nimport { TableCell, TableRow, TableSelect } from '../table';\nimport { StatProgressionArray } from './StatProgressionArray';\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface LevelRowProps {\n  race: Race;\n  level: number;\n  classId: number;\n  classes: number[];\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  feats?: {\n    general?: string;\n    bonus1?: string;\n    bonus2?: string;\n  };\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const LevelRow: FC<LevelRowProps> = ({\n  race,\n  level,\n  classId,\n  classes,\n  abilityScores,\n  abilityScoreIncreases,\n  feats: {\n    general,\n    bonus1,\n    bonus2,\n  } = {},\n  updateBuild,\n}) => {\n  const currentClass = useRecoilValue(classState(classId));\n  const changeClass = (newClassId: number) => (\n    updateBuild({ classes: { [level]: newClassId }})\n  );\n\n  const getClassLevel = useCallback(() => (\n    classes.filter(id => id === classId).length\n  ), [classes, classId]);\n\n  const classLevel = useMemo(() => getClassLevel(), [getClassLevel]);\n\n  const {\n    abilityScoreChoiceIncrease: racialLevelOneIncrease,\n    abilityScores: racialAbilityScoreIncreases = {},\n  } = race;\n\n  const calculateAbilityScore = useCallback((ability: Ability): number => {\n    const racialAbilityIncrease = racialAbilityScoreIncreases[ability] || 0;\n    const levelOneIncrease = abilityScoreIncreases[1] === ability && racialLevelOneIncrease || 0;\n    const regularIncreases = Object.keys(abilityScoreIncreases).filter(key => (\n      key != '1' &&\n      abilityScoreIncreases[key] === ability\n    )).length;\n\n    return abilityScores[ability] + racialAbilityIncrease + levelOneIncrease + regularIncreases;\n  }, [abilityScores, abilityScoreIncreases, racialLevelOneIncrease, racialAbilityScoreIncreases]);\n\n  const calculateAbilityScores = useCallback((): AbilityScores => (\n    (Object.keys(abilityScores) as Ability[]).reduce((acc, ability) => ({\n      ...acc,\n      [ability]: calculateAbilityScore(ability),\n    }), {} as AbilityScores)\n  ), [abilityScores, calculateAbilityScore]);\n\n  const calculatedAbilityScores = calculateAbilityScores();\n\n  const savingThrowModifiers = useMemo(() => ({\n    fort: resolveAbilityScoreModifier(calculatedAbilityScores.con),\n    ref: resolveAbilityScoreModifier(calculatedAbilityScores.dex),\n    will: resolveAbilityScoreModifier(calculatedAbilityScores.wis),\n  }), [calculatedAbilityScores]);\n\n  return (\n    <TableRow>\n      <LevelCell>{level}</LevelCell>\n      <ClassCell cl={currentClass} classLevel={classLevel} onChange={changeClass} />\n      <AbilityScoreCellArray\n        abilityScores={calculatedAbilityScores}\n        abilityScoreIncreases={abilityScoreIncreases}\n        bonuses={racialAbilityScoreIncreases}\n        choice={level % 4 !== 0 && !(!!racialLevelOneIncrease && level === 1)}\n        level={level}\n        updateBuild={updateBuild}\n      />\n      <TableCell disabled={level % 2 === 0} width={200}>\n        {level % 2 !== 0 && (\n          <TableSelect name=\"generalFeat\">\n            <option>\n              {general}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus1} width={200}>\n        {!!bonus1 && (\n          <TableSelect name=\"bonusFeat1\">\n            <option>\n              {bonus1}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus2}>\n        {!!bonus2 && (\n          <TableSelect name=\"bonusFeat2\">\n            <option>\n              {bonus2}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <StatProgressionArray classIds={classes} modifiers={savingThrowModifiers} />\n      <TableCell></TableCell>\n    </TableRow>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { Build, Character } from '../../models';\nimport { buildState, raceState } from '../../state';\nimport { LevelRow } from './level';\n\nconst Table = styled.table`\n  th {\n    font-family: sans-serif;\n    font-size: ${rem(10)};\n    text-align: left;\n  }\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores, race: raceId } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  const race = useRecoilValue(raceState(raceId));\n\n  if (!build) return null;\n\n  const {\n    abilityScoreIncreases,\n    classes,\n    feats,\n    skills,\n  } = build;\n\n  const updateBuild = useCallback((data: Partial<Build>) => {\n    console.log('Updating build...', data);\n    setBuild({\n      ...build,\n      ...data,\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        ...data.abilityScoreIncreases,\n      },\n      classes: {\n        ...classes,\n        ...data.classes,\n      },\n      feats: {\n        ...feats,\n        ...data.feats,\n      },\n      skills: {\n        ...skills,\n        ...data.skills,\n      },\n    });\n  }, [build, setBuild]);\n\n  const getClassesAtLevel = useCallback((level: number) => (\n    Object.values(classes).slice(0, level)\n  ), [classes]);\n\n  const getAbilityScoreIncreasesAtLevel = useCallback((level: string) => (\n    Object.keys(abilityScoreIncreases).filter(key => (\n      parseInt(key) <= parseInt(level)\n    )).reduce((increases, iLevel) => ({\n      ...increases,\n      [iLevel]: abilityScoreIncreases[iLevel],\n    }), {})\n  ), [abilityScoreIncreases]);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th />\n          <th>Class</th>\n          <th>Archetype</th>\n          {Object.keys(abilityScores).map(a => <th key={a}>{a.toUpperCase()}</th>)}\n          <th>Feats (general)</th>\n          <th colSpan={2}>Feats (bonus)</th>\n          <th>BAB</th>\n          <th>Fort</th>\n          <th>Ref</th>\n          <th>Will</th>\n          <th>Traits</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(classes).map((\n          [level, classId],\n        ) => (\n          <LevelRow\n            key={level}\n            race={race}\n            level={parseInt(level)}\n            classId={classId}\n            classes={getClassesAtLevel(parseInt(level))}\n            abilityScores={abilityScores}\n            abilityScoreIncreases={getAbilityScoreIncreasesAtLevel(level)}\n            feats={feats[level]}\n            updateBuild={updateBuild}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from './Field';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScores: racialAbilityScoreIncreases,\n  } = useRecoilValue(raceState(raceId));\n\n  const onChange = useCallback((ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  }, [abilityScores, updateCharacter]);\n\n  const getModForAbility = useCallback((ability: Ability): number => (\n    racialAbilityScoreIncreases ? racialAbilityScoreIncreases[ability] || 0 : 0\n  ), [racialAbilityScoreIncreases]);\n\n  const getIncreaseAsString = useCallback((increase: number) => (\n    increase === 0\n      ? ''\n      : increase > 0 ? `+${increase}` : increase\n  ), []);\n\n  return (\n    <AbilityScoresWrapper>\n      {(Object.entries(abilityScores) as [Ability, number][]).map(([ability, score]) => (\n        <Field key={ability} width={40}>\n          <select\n            name={ability}\n            value={score}\n            onChange={e => onChange(ability, parseInt(e.target.value))}\n          >\n            {Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={ability}>\n            {`${ability.toUpperCase()} ${getIncreaseAsString(getModForAbility(ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Heritage } from '../../models';\nimport { baseRaceListSelector, raceState, racialHeritagesState } from '../../state';\nimport { Field } from './Field';\n\nexport interface CharacterRaceProps {\n  raceId: number;\n  onChange: (newRaceId: number) => void;\n}\n\nexport const CharacterRace: FC<CharacterRaceProps> = ({ raceId, onChange }) => {\n  const race = useRecoilValue(raceState(raceId));\n  const base = (race as Heritage).base || raceId;\n  const races = useRecoilValue(baseRaceListSelector);\n  const heritages = useRecoilValue(racialHeritagesState(base));\n  const hasRacialHeritages = heritages.length > 0;\n\n  return (\n    <>\n      <Field>\n        <select\n          name=\"race\"\n          value={base}\n          onChange={({ target: { value }}) => onChange(parseInt(value))}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"race\">Race</label>\n      </Field>\n      {hasRacialHeritages && (\n        <Field>\n          <select\n            name=\"heritage\"\n            value={raceId}\n            onChange={({ target: { value }}) => onChange(parseInt(value) || base)}\n          >\n            <option />\n            {heritages.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n          <label htmlFor=\"heritage\">Heritage</label>\n        </Field>\n      )}\n    </>\n  );\n};\n","import React, { FC, KeyboardEvent, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { BaseAbilityScores } from './BaseAbilityScores';\nimport { CharacterRace } from './CharacterRace';\nimport { Field } from './Field';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const changeRace = useCallback((newRaceId: number) => (\n    updateCharacter({ race: newRaceId })\n  ), [updateCharacter]);\n\n  const handleKeyDown = useCallback((\n    { key }: KeyboardEvent<HTMLInputElement>,\n    data: Partial<Character>,\n  ) => {\n    if (key === 'Enter') updateCharacter(data);\n  }, [updateCharacter]);\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <CharacterRace raceId={race} onChange={changeRace} />\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState, selectedBuildState } from '../../state';\nimport { BuildTable } from '../build';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds } = character;\n\n  const updateCharacter = useCallback((data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  }, [character, setCharacter]);\n\n  if (!builds || !builds.length) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={useRecoilValue(selectedBuildState)} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { characterListState, selectedCharacterState } from '../state';\n\nexport const Nav: FC = () => {\n  const characters = useRecoilValue(characterListState);\n  const setCharacter = useSetRecoilState(selectedCharacterState);\n\n  return (\n    <nav>\n      {characters.map(({ id, name }) => (\n        <button key={id} onClick={() => setCharacter(id)}>\n          {name}\n        </button>\n      ))}\n    </nav>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\nimport { selectedCharacterState } from '../state';\nimport { Nav } from './Nav';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <Nav />\n    <CharacterSheet id={useRecoilValue(selectedCharacterState)} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}