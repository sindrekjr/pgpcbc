{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","components/build/table/TableCell.tsx","components/build/table/TableRow.tsx","components/build/table/TableSelect.tsx","components/build/abilityScores/AbilityScoreCell.tsx","components/build/abilityScores/AbilityScoreCellArray.tsx","components/build/class/ClassCell.tsx","components/build/level/LevelRow.tsx","components/build/BuildTable.tsx","assets/sheet.jpg","analytics/reportWebVitals.ts","components/character/Field.tsx","components/character/BaseAbilityScores.tsx","components/character/CharacterRace.tsx","components/character/BaseInformation.tsx","components/character/CharacterSheet.tsx","App/Nav.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","primaryClasses","alchemist","archetypes","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","buildState","atomFamily","selectorFamily","identifier","find","id","characterListState","selectedCharacterState","characterState","character","name","Error","classListState","primaryClassListSelector","filter","c","archetypeListSelector","base","prestigeClassListSelector","maxLevel","classState","allClasses","cl","baseClass","archetypesState","baseId","raceListState","baseRaceListSelector","r","raceHeritageListSelector","raceState","allRaces","race","baseRace","racialHeritagesState","TableCell","td","disabled","css","TableRow","tr","TableSelect","select","bonusColour","penaltyColour","selectedColour","Score","bonus","penalty","selected","Button","button","AbilityScoreCell","score","onSelect","width","onClick","tabIndex","AbilityScoreCellArray","abilityScores","abilityScoreIncreases","level","updateBuild","abilityScoreChoiceIncrease","racialLevelOneIncrease","racialAbilityScoreIncreases","calculateAbilityScore","ability","levelOneIncrease","regularIncreases","n","toString","length","racialAbilityIncrease","hasBonus","racial","hasPenalty","Object","keys","map","changeAbilityScoreIncrease","ClassCell","classId","onChange","useRecoilValue","hasArchetypes","value","e","parseInt","target","LevelCell","LevelRow","feats","general","bonus1","bonus2","newClassId","Table","table","BuildTable","buildId","raceId","useRecoilState","build","setBuild","skills","data","console","log","colSpan","entries","onPerfEntry","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","updateCharacter","getModForAbility","increase","newValue","Array","from","_","htmlFor","toUpperCase","CharacterRace","heritages","hasRacialHeritages","InformationSection","section","BaseInformation","useState","nameVal","setNameVal","type","placeholder","onKeyDown","newRaceId","values","Number","a","Sheet","article","sheet","CharacterSheet","setCharacter","Nav","useSetRecoilState","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.f4b5cb99.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\nimport lann from './lann.character.json';\n\nexport const characters = [\n  seelah,\n  lann,\n];\n","import { Class } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\n\nexport const primaryClasses: Class[] = [\n  alchemist, ...alchemist.archetypes,\n  arcanist, ...arcanist.archetypes,\n  barbarian, ...barbarian.archetypes,\n  bard, ...bard.archetypes,\n  bloodrager, ...bloodrager.archetypes,\n  cavalier, ...cavalier.archetypes,\n  cleric, ...cleric.archetypes,\n  druid, ...druid.archetypes,\n  fighter, ...fighter.archetypes,\n  hunter, ...hunter.archetypes,\n  inquisitor, ...inquisitor.archetypes,\n  kineticist, ...kineticist.archetypes,\n  magus, ...magus.archetypes,\n  monk, ...monk.archetypes,\n  oracle, ...oracle.archetypes,\n  paladin, ...paladin.archetypes,\n  ranger, ...ranger.archetypes,\n  rogue, ...rogue.archetypes,\n  shaman, ...shaman.archetypes,\n  skald, ...skald.archetypes,\n  slayer, ...slayer.archetypes,\n  sorcerer, ...sorcerer.archetypes,\n  warpriest, ...warpriest.archetypes,\n  witch, ...witch.archetypes,\n  wizard, ...wizard.archetypes,\n];\n","import { PrestigeClass } from '../../../../models';\nimport aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses: PrestigeClass[] = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const selectedCharacterState = atom<number>({\n  key: 'selectedCharacter/state',\n  default: 0,\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Archetype, Class, PrestigeClass, PrimaryClass } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const primaryClassListSelector = selector<PrimaryClass[]>({\n  key: 'primaryClassList/selector',\n  get: ({ get }) => (get(classListState) as PrimaryClass[]).filter(c => c.archetypes),\n});\n\nexport const archetypeListSelector = selector<Archetype[]>({\n  key: 'archetypeList/selector',\n  get: ({ get }) => (get(classListState) as Archetype[]).filter(c => c.base),\n});\n\nexport const prestigeClassListSelector = selector<PrestigeClass[]>({\n  key: 'prestigeClassList/selector',\n  get: ({ get }) => (get(classListState) as PrestigeClass[]).filter(c => c.maxLevel),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const allClasses = get(classListState);\n      const cl = allClasses.find(({ id }) => id === identifier);\n\n      if (cl) {\n        const base = (cl as Archetype).base;\n        if (!base) return cl;\n\n        const baseClass = allClasses.find(({ id }) => id === base);\n        return {\n          ...baseClass,\n          ...cl,\n        };\n      }\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const archetypesState = atomFamily<Archetype[], number>({\n  key: 'archetypes/state',\n  default: selectorFamily<Archetype[], number>({\n    key: 'archetypes/selector',\n    get: baseId => ({ get }) => get(archetypeListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const allRaces = get(raceListState);\n      const race = allRaces.find(({ id }) => id === identifier);\n\n      if (race) {\n        const base = (race as Heritage).base;\n        if (!base) return race;\n\n        const baseRace = allRaces.find(({ id }) => id === base);\n        return {\n          ...baseRace,\n          ...race,\n        };\n      }\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const racialHeritagesState = atomFamily<Heritage[], number>({\n  key: 'racialHeritages/state',\n  default: selectorFamily<Heritage[], number>({\n    key: 'racialHeritages/selector',\n    get: baseId => ({ get }) => get(raceHeritageListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  ${({ disabled }) => disabled && css`\n    border: ${rem(1)} solid #e6e1dd;\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell, TableCellProps } from '../table';\n\nconst bonusColour = '#969d76';\nconst penaltyColour = '#ba847c';\nconst selectedColour = '#926a82';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  penalty?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  line-height: 1;\n  text-align: center;\n\n  ${({ bonus }) => bonus && css`\n    background: ${bonusColour};\n    color: white;\n  `}\n\n  ${({ penalty }) => penalty && css`\n    background: ${penaltyColour};\n    color: white;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: ${selectedColour};\n    border: ${rem(1)} inset #aca195;\n    color: white;\n  `}\n\n  ${({ bonus, penalty, selected }) => (bonus || penalty) && selected && css`\n    background: -webkit-linear-gradient(\n      145deg, ${bonus ? bonusColour : penaltyColour} 30%, ${selectedColour} 40%\n    );\n  `}\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: ${({ disabled }) => disabled ? 'default' : 'pointer'};\n`;\n\nexport interface AbilityScoreCellProps extends ScoreProps {\n  score: number;\n  onSelect?: () => void;\n}\n\nexport const AbilityScoreCell: FC<AbilityScoreCellProps> = ({\n  score,\n  bonus,\n  penalty,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    penalty={penalty}\n    disabled={disabled}\n    selected={selected}\n    width={20}\n  >\n    <Button\n      disabled={disabled}\n      onClick={() => onSelect && onSelect()}\n      tabIndex={disabled ? -1 : 0}\n    >\n      {score}\n    </Button>\n  </Score>\n);\n","import React, { FC } from 'react';\n\nimport { Ability, AbilityScores, Build, Race } from '../../../models';\nimport { AbilityScoreCell } from './AbilityScoreCell';\n\nexport interface AbilityScoreCellArrayProps {\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  level: number;\n  race: Race;\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const AbilityScoreCellArray: FC<AbilityScoreCellArrayProps> = ({\n  abilityScores,\n  abilityScoreIncreases,\n  level,\n  race,\n  updateBuild,\n}) => {\n  const {\n    abilityScoreChoiceIncrease: racialLevelOneIncrease = 0,\n    abilityScores: racialAbilityScoreIncreases = {},\n  } = race;\n\n  const changeAbilityScoreIncrease = (ability: Ability): void => {\n    updateBuild({\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        [level]: ability,\n      },\n    });\n  };\n\n  const calculateAbilityScore = (ability: Ability): number => {\n    const levelOneIncrease = abilityScoreIncreases[1] === ability && racialLevelOneIncrease || 0;\n    const regularIncreases = [4, 8, 12, 16, 20].filter(n => n <= level).filter(key => (\n      abilityScoreIncreases[key.toString()] === ability\n    )).length;\n\n    const racialAbilityIncrease = racialAbilityScoreIncreases[ability] || 0;\n\n    return abilityScores[ability] + racialAbilityIncrease + levelOneIncrease + regularIncreases;\n  };\n\n  const hasBonus = (ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial > 0) return true;\n    }\n\n    return false;\n  };\n\n  const hasPenalty = (ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial < 0) return true;\n    }\n\n    return false;\n  };\n\n  const disabled = level % 4 !== 0 && !(!!racialLevelOneIncrease && level === 1);\n\n  return (\n    <>\n      {(Object.keys(abilityScores) as Ability[]).map(ability => disabled\n        ? (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n          />\n        ) : (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n            selected={abilityScoreIncreases[level] === ability}\n            onSelect={() => changeAbilityScoreIncrease(ability)}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Archetype } from '../../../models';\nimport {\n  archetypesState,\n  classState,\n  prestigeClassListSelector,\n  primaryClassListSelector,\n} from '../../../state';\nimport { TableCell, TableSelect } from '../table';\n\nexport interface ClassCellProps {\n  classId: number;\n  classCount?: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassCell: FC<ClassCellProps> = ({ classId, onChange }) => {\n  const cl = useRecoilValue(classState(classId));\n  const base = (cl as Archetype).base || classId;\n  const primaryClasses = useRecoilValue(primaryClassListSelector);\n  const archetypes = useRecoilValue(archetypesState(base));\n  const prestigeClasses = useRecoilValue(prestigeClassListSelector);\n  const hasArchetypes = archetypes.length > 0;\n\n  return (\n    <>\n      <TableCell>\n        <TableSelect\n          name=\"class\"\n          value={base}\n          onChange={e => onChange && onChange(parseInt(e.target.value) || classId)}\n        >\n          <option />\n          {[...primaryClasses, ...prestigeClasses].map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </TableSelect>\n      </TableCell>\n      <TableCell disabled={!hasArchetypes}>\n        {hasArchetypes && (\n          <TableSelect\n            name=\"archetype\"\n            value={classId}\n            onChange={({ target: { value }}) => onChange && onChange(parseInt(value) || base)}\n          >\n            <option />\n            {archetypes.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </TableSelect>\n        )}\n      </TableCell>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { AbilityScores, Build, Race } from '../../../models';\nimport { AbilityScoreCellArray } from '../abilityScores';\nimport { ClassCell } from '../class';\nimport { TableCell, TableRow, TableSelect } from '../table';\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface LevelRowProps {\n  race: Race;\n  level: number;\n  classId: number;\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  feats?: {\n    general?: string;\n    bonus1?: string;\n    bonus2?: string;\n  };\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const LevelRow: FC<LevelRowProps> = ({\n  race,\n  level,\n  classId,\n  abilityScores,\n  abilityScoreIncreases,\n  feats: {\n    general,\n    bonus1,\n    bonus2,\n  } = {},\n  updateBuild,\n}) => {\n\n  const changeClass = (newClassId: number) => updateBuild({ classes: { [level]: newClassId }});\n\n  return (\n    <TableRow>\n      <LevelCell>{level}</LevelCell>\n      <ClassCell classId={classId} onChange={changeClass} />\n      <AbilityScoreCellArray\n        abilityScores={abilityScores}\n        abilityScoreIncreases={abilityScoreIncreases}\n        level={level}\n        race={race}\n        updateBuild={updateBuild}\n      />\n      <TableCell disabled={level % 2 === 0}>\n        {level % 2 !== 0 && (\n          <TableSelect name=\"generalFeat\">\n            <option>\n              {general}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus1}>\n        {!!bonus1 && (\n          <TableSelect name=\"bonusFeat1\">\n            <option>\n              {bonus1}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus2}>\n        {!!bonus2 && (\n          <TableSelect name=\"bonusFeat2\">\n            <option>\n              {bonus2}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell></TableCell>\n    </TableRow>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { buildState } from '../../state/build.state';\nimport { Build, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { LevelRow } from './level';\n\nconst Table = styled.table`\n  width: 100%;\n\n  th {\n    text-align: left;\n  }\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores, race: raceId } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  const race = useRecoilValue(raceState(raceId));\n\n  if (!build) return null;\n\n  const {\n    abilityScoreIncreases,\n    classes,\n    feats,\n    skills,\n  } = build;\n\n  const updateBuild = (data: Partial<Build>) => {\n    console.log('Updating build...', data);\n    setBuild({\n      ...build,\n      ...data,\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        ...data.abilityScoreIncreases,\n      },\n      classes: {\n        ...classes,\n        ...data.classes,\n      },\n      feats: {\n        ...feats,\n        ...data.feats,\n      },\n      skills: {\n        ...skills,\n        ...data.skills,\n      },\n    });\n  };\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th />\n          <th>Class</th>\n          <th>Archetype</th>\n          <th colSpan={Object.keys(abilityScores).length} />\n          <th>Feats (general)</th>\n          <th colSpan={2}>Feats (bonus)</th>\n          <th>Traits</th>\n        </tr>\n      </thead>\n      <tbody>\n        {(Object.entries(classes) as [string, number][]).map((\n          [level, classId],\n        ) => (\n          <LevelRow\n            key={level}\n            race={race}\n            level={parseInt(level)}\n            classId={classId}\n            abilityScores={abilityScores}\n            abilityScoreIncreases={abilityScoreIncreases}\n            feats={feats[level]}\n            updateBuild={updateBuild}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from './Field';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScores: racialAbilityScoreIncreases,\n  } = useRecoilValue(raceState(raceId));\n\n  const onChange = (ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  };\n\n  const getModForAbility = (ability: Ability): number => (\n    racialAbilityScoreIncreases ? racialAbilityScoreIncreases[ability] || 0 : 0\n  );\n\n  const getIncreaseAsString = (increase: number) => (\n    increase === 0\n      ? ''\n      : increase > 0 ? `+${increase}` : increase\n  );\n\n  return (\n    <AbilityScoresWrapper>\n      {(Object.entries(abilityScores) as [Ability, number][]).map(([ability, score]) => (\n        <Field key={ability} width={40}>\n          <select\n            name={ability}\n            value={score}\n            onChange={e => onChange(ability, parseInt(e.target.value))}\n          >\n            {Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={ability}>\n            {`${ability.toUpperCase()} ${getIncreaseAsString(getModForAbility(ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Heritage } from '../../models';\nimport { baseRaceListSelector, raceState, racialHeritagesState } from '../../state';\nimport { Field } from './Field';\n\nexport interface CharacterRaceProps {\n  raceId: number;\n  onChange: (newRaceId: number) => void;\n}\n\nexport const CharacterRace: FC<CharacterRaceProps> = ({ raceId, onChange }) => {\n  const race = useRecoilValue(raceState(raceId));\n  const base = (race as Heritage).base || raceId;\n  const races = useRecoilValue(baseRaceListSelector);\n  const heritages = useRecoilValue(racialHeritagesState(base));\n  const hasRacialHeritages = heritages.length > 0;\n\n  return (\n    <>\n      <Field>\n        <select\n          name=\"race\"\n          value={base}\n          onChange={({ target: { value }}) => onChange(parseInt(value))}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"race\">Race</label>\n      </Field>\n      {hasRacialHeritages && (\n        <Field>\n          <select\n            name=\"heritage\"\n            value={raceId}\n            onChange={({ target: { value }}) => onChange(parseInt(value) || base)}\n          >\n            <option />\n            {heritages.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n          <label htmlFor=\"heritage\">Heritage</label>\n        </Field>\n      )}\n    </>\n  );\n};\n","import React, { FC, KeyboardEvent, useState } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { BaseAbilityScores } from './BaseAbilityScores';\nimport { CharacterRace } from './CharacterRace';\nimport { Field } from './Field';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const changeRace = (newRaceId: number) => updateCharacter({ race: newRaceId });\n\n  const handleKeyDown = ({ key }: KeyboardEvent<HTMLInputElement>, data: Partial<Character>) => {\n    if (key === 'Enter') updateCharacter(data);\n  };\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <CharacterRace raceId={race} onChange={changeRace} />\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { BuildTable } from '../build';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds } = character;\n\n  const updateCharacter = (data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  };\n\n  if (!builds || !builds.length) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={builds[0]} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { characterListState, selectedCharacterState } from '../state';\n\nexport const Nav: FC = () => {\n  const characters = useRecoilValue(characterListState);\n  const setCharacter = useSetRecoilState(selectedCharacterState);\n\n  return (\n    <nav>\n      {characters.map(({ id, name }) => (\n        <button key={id} onClick={() => setCharacter(id)}>\n          {name}\n        </button>\n      ))}\n    </nav>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\nimport { selectedCharacterState } from '../state';\nimport { Nav } from './Nav';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <Nav />\n    <CharacterSheet id={useRecoilValue(selectedCharacterState)} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}