{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","assets/sheet.jpg","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","components/table/TableCell.tsx","components/table/AbilityScoreTableCell.tsx","components/table/TableRow.tsx","components/table/TableSelect.tsx","components/table/ClassTableCell.tsx","components/table/BuildTable.tsx","analytics/reportWebVitals.ts","components/common/Field.tsx","components/sheet/BaseAbilityScores.tsx","components/sheet/BaseInformation.tsx","components/sheet/CharacterSheet.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","primaryClasses","alchemist","archetypes","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","buildState","atomFamily","selectorFamily","identifier","find","id","characterListState","characterState","character","name","Error","classListState","raceListState","cl","baseRaceListSelector","filter","r","base","raceState","race","TableCell","td","disabled","css","Score","bonus","selected","AbilityScoreTableCell","ability","score","onSelect","onClick","width","TableRow","tr","TableSelect","select","ClassTableCell","classId","classCount","onChange","useRecoilValue","value","e","parseInt","target","map","Table","table","LevelCell","BuildTable","buildId","abilityScores","useRecoilState","build","setBuild","description","asi","abilityScoreIncreases","feats","abilityScoreIncreaseSelected","atLevel","colSpan","Object","keys","length","entries","level","values","slice","c","newClassId","changeClass","a","n","changeAbilityScoreIncrease","general","bonus1","bonus2","onPerfEntry","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","raceId","updateCharacter","choiceMod","abilityScoreChoiceIncrease","mods","useState","choice","setChoice","getModForAbility","getOptionsForAbility","array","Array","from","_","mod","newValue","htmlFor","toUpperCase","InformationSection","section","BaseInformation","nameVal","setNameVal","type","placeholder","onKeyDown","data","Number","Sheet","article","sheet","CharacterSheet","setCharacter","undefined","console","log","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.0cb47d27.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\n\nexport const characters = [\n  seelah,\n];\n","import { Class } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\n\nexport const primaryClasses: Class[] = [\n  alchemist, ...alchemist.archetypes,\n  arcanist, ...arcanist.archetypes,\n  barbarian, ...barbarian.archetypes,\n  bard, ...bard.archetypes,\n  bloodrager, ...bloodrager.archetypes,\n  cavalier, ...cavalier.archetypes,\n  cleric, ...cleric.archetypes,\n  druid, ...druid.archetypes,\n  fighter, ...fighter.archetypes,\n  hunter, ...hunter.archetypes,\n  inquisitor, ...inquisitor.archetypes,\n  kineticist, ...kineticist.archetypes,\n  magus, ...magus.archetypes,\n  monk, ...monk.archetypes,\n  oracle, ...oracle.archetypes,\n  paladin, ...paladin.archetypes,\n  ranger, ...ranger.archetypes,\n  rogue, ...rogue.archetypes,\n  shaman, ...shaman.archetypes,\n  skald, ...skald.archetypes,\n  slayer, ...slayer.archetypes,\n  sorcerer, ...sorcerer.archetypes,\n  warpriest, ...warpriest.archetypes,\n  witch, ...witch.archetypes,\n  wizard, ...wizard.archetypes,\n];\n","import aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Class } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const cl = get(classListState).find(({ id }) => id === identifier);\n      if (cl) return cl;\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const race = get(raceListState).find(({ id }) => id === identifier);\n      if (race) return race;\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  ${({ disabled }) => disabled && css`\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { Ability } from '../../models';\nimport { TableCell, TableCellProps } from './TableCell';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  cursor: pointer;\n  text-align: center;\n\n  ${({ bonus }) => bonus && css`\n    background: #cdc0a6;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: #926a82;\n    border: ${rem(1)} solid #dad4ce;\n    color: white;\n  `}\n\n  ${({ bonus, selected }) => bonus && selected && css`\n    background: -webkit-linear-gradient(145deg, #cdc0a6 30%, #926a82 40%);\n  `}\n`;\n\nexport interface AbilityScoreTableCellProps extends ScoreProps {\n  ability: Ability;\n  score: number;\n  onSelect?: (ability: Ability) => void;\n}\n\nexport const AbilityScoreTableCell: FC<AbilityScoreTableCellProps> = ({\n  ability,\n  score,\n  bonus,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    disabled={disabled}\n    selected={selected}\n    onClick={() => onSelect && onSelect(ability)}\n    width={20}\n  >\n    {score}\n  </Score>\n);\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { classListState } from '../../state/class.state';\nimport { TableCell } from './TableCell';\nimport { TableSelect } from './TableSelect';\n\nexport interface ClassTableCellProps {\n  classId: number;\n  classCount?: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassTableCell: FC<ClassTableCellProps> = ({ classId, classCount, onChange }) => {\n  const classes = useRecoilValue(classListState);\n\n  return (\n    <TableCell>\n      <TableSelect\n        name=\"class\"\n        value={classId}\n        onChange={e => onChange && onChange(parseInt(e.target.value))}\n      >\n        {classes.map(({ id, name }) => (\n          <option key={id} value={id}>\n            {`${name}${classCount && id === classId ? ` (${classCount})` : ''}`}\n          </option>\n        ))}\n      </TableSelect>\n    </TableCell>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { buildState } from '../../state/build.state';\nimport { Ability, Character } from '../../models';\nimport { AbilityScoreTableCell } from './AbilityScoreTableCell';\nimport { TableCell } from './TableCell';\nimport { TableRow } from './TableRow';\nimport { ClassTableCell } from './ClassTableCell';\nimport { TableSelect } from './TableSelect';\n\nconst Table = styled.table`\n  width: 100%;\n\n  th {\n    text-align: left;\n  }\n`;\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  if (!build) return null;\n\n  const { name, description, abilityScoreIncreases: asi, classes, feats } = build;\n\n  const countAbilityScoreIncreases = (ability: string, atLevel: number): number => (\n    [4,8,12,16,20].filter(n => n <= atLevel).filter(key => asi[key] === ability).length\n  );\n\n  const abilityScoreIncreaseSelected = (ability: string, atLevel: number): boolean => (\n    asi[atLevel] === ability\n  );\n\n  const changeAbilityScoreIncrease = (ability: Ability, atLevel: number): void => {\n    setBuild({\n      ...build,\n      abilityScoreIncreases: {\n        ...asi,\n        [atLevel]: ability,\n      },\n    });\n  };\n\n  const changeClass = (level: number, newClassId: number) => setBuild({\n    ...build,\n    classes: {\n      ...classes,\n      [level]: newClassId,\n    },\n  });\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th />\n            <th>Class</th>\n            <th colSpan={Object.keys(abilityScores).length} />\n            <th>Feats (general)</th>\n            <th colSpan={2}>Feats (bonus)</th>\n            <th>Traits</th>\n          </tr>\n        </thead>\n        <tbody>\n          {(Object.entries(classes) as unknown as [number, number][]).map(([level, classId]) => (\n            <TableRow key={`${classId}-${level}`}>\n              <LevelCell>{level}</LevelCell>\n              <ClassTableCell\n                classId={classId}\n                classCount={(\n                  Object.values(classes).slice(0, level).filter(c => c === classId).length\n                )}\n                onChange={newClassId => changeClass(level, newClassId)}\n              />\n              {Object.entries(abilityScores).map(([a, score]) => (\n                <AbilityScoreTableCell\n                  key={a}\n                  ability={a as Ability}\n                  score={score + countAbilityScoreIncreases(a, level)}\n                  disabled={level % 4 !== 0}\n                  selected={level % 4 === 0 && abilityScoreIncreaseSelected(a, level)}\n                  onSelect={ability => changeAbilityScoreIncrease(ability, level)}\n                />\n              ))}\n              <TableCell disabled={level % 2 === 0}>\n                {level % 2 !== 0 && (\n                  <TableSelect name=\"feat\">\n                    <option>\n                      {feats[level] && feats[level].general}\n                    </option>\n                  </TableSelect>\n                )}\n              </TableCell>\n              <TableCell>\n                {feats[level] && feats[level].bonus1}\n              </TableCell>\n              <TableCell>\n                {feats[level] && feats[level].bonus2}\n              </TableCell>\n              <TableCell></TableCell>\n            </TableRow>\n          ))}\n        </tbody>\n      </Table>\n      <h4>{name}</h4>\n      <p>{description}</p>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from '../common';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScoreChoiceIncrease: choiceMod,\n    abilityScores: mods,\n  } = useRecoilValue(raceState(raceId));\n\n  const [choice, setChoice] = useState<Ability | null>(choiceMod ? 'str' : null);\n\n  const onChange = (ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  };\n\n  const getModForAbility = (ability: Ability): number => (\n    choiceMod\n      ? choice === ability ? choiceMod : 0\n      : mods ? mods[ability] || 0 : 0\n  );\n\n  const getOptionsForAbility = (ability: Ability) => {\n    const array = Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6);\n    const mod = getModForAbility(ability);\n    return array.map(n => n + mod);\n  };\n\n  const getModString = (mod: number) => (\n    mod === 0\n      ? ''\n      : mod > 0 ? `+${mod}` : mod\n  );\n\n  return (\n    <AbilityScoresWrapper>\n      {Object.entries(abilityScores).map(([a, score]) => (\n        <Field key={a} width={40}>\n          <select\n            name={a}\n            value={score}\n            onChange={e => onChange(a as Ability, parseInt(e.target.value))}\n          >\n            {getOptionsForAbility(a as Ability).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={a} onClick={() => choiceMod && setChoice(a as Ability)}>\n            {`${a.toUpperCase()} ${getModString(getModForAbility(a as Ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC, KeyboardEvent, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { baseRaceListSelector } from '../../state';\nimport { Field } from '../common';\nimport { BaseAbilityScores } from './BaseAbilityScores';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n  const races = useRecoilValue(baseRaceListSelector);\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const handleKeyDown = ({ key }: KeyboardEvent<HTMLInputElement>, data: Partial<Character>) => {\n    if (key === 'Enter') updateCharacter(data);\n  };\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <Field>\n        <select\n          name=\"race\"\n          value={race}\n          onChange={e => updateCharacter({ race: parseInt(e.target.value ) })}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </Field>\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { BuildTable } from '../table';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds: [buildId] } = character;\n\n  const updateCharacter = (data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  };\n\n  if (buildId === undefined) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={buildId} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <CharacterSheet id={0} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}