{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","assets/sheet.jpg","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","components/table/TableCell.tsx","components/table/AbilityScoreTableCell.tsx","components/table/AbilityScoreTableCells.tsx","components/table/TableRow.tsx","components/table/TableSelect.tsx","components/table/ClassTableCell.tsx","components/table/BuildTable.tsx","analytics/reportWebVitals.ts","components/common/Field.tsx","components/sheet/BaseAbilityScores.tsx","components/sheet/BaseInformation.tsx","components/sheet/CharacterSheet.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","primaryClasses","alchemist","archetypes","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","buildState","atomFamily","selectorFamily","identifier","find","id","characterListState","characterState","character","name","Error","classListState","raceListState","cl","baseRaceListSelector","filter","r","base","raceState","race","TableCell","td","disabled","css","bonusColour","penaltyColour","selectedColour","Score","bonus","penalty","selected","AbilityScoreTableCell","score","onSelect","onClick","width","AbilityScoreTableCells","abilityScores","abilityScoreIncreases","level","raceId","updateBuild","useRecoilValue","abilityScoreChoiceIncrease","racialLevelOneIncrease","racialAbilityScoreIncreases","calculateAbilityScore","ability","levelOneIncrease","regularIncreases","n","toString","length","racialAbilityIncrease","hasBonus","racial","hasPenalty","Object","keys","map","changeAbilityScoreIncrease","TableRow","tr","TableSelect","select","ClassTableCell","classId","classCount","onChange","value","e","parseInt","target","Table","table","LevelCell","BuildTable","buildId","useRecoilState","build","setBuild","feats","data","console","log","colSpan","entries","values","slice","c","newClassId","general","bonus1","bonus2","onPerfEntry","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","updateCharacter","getModForAbility","increase","newValue","Array","from","_","htmlFor","toUpperCase","InformationSection","section","BaseInformation","useState","nameVal","setNameVal","type","placeholder","onKeyDown","Number","a","Sheet","article","sheet","CharacterSheet","setCharacter","undefined","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.76127e0f.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\n\nexport const characters = [\n  seelah,\n];\n","import { Class } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\n\nexport const primaryClasses: Class[] = [\n  alchemist, ...alchemist.archetypes,\n  arcanist, ...arcanist.archetypes,\n  barbarian, ...barbarian.archetypes,\n  bard, ...bard.archetypes,\n  bloodrager, ...bloodrager.archetypes,\n  cavalier, ...cavalier.archetypes,\n  cleric, ...cleric.archetypes,\n  druid, ...druid.archetypes,\n  fighter, ...fighter.archetypes,\n  hunter, ...hunter.archetypes,\n  inquisitor, ...inquisitor.archetypes,\n  kineticist, ...kineticist.archetypes,\n  magus, ...magus.archetypes,\n  monk, ...monk.archetypes,\n  oracle, ...oracle.archetypes,\n  paladin, ...paladin.archetypes,\n  ranger, ...ranger.archetypes,\n  rogue, ...rogue.archetypes,\n  shaman, ...shaman.archetypes,\n  skald, ...skald.archetypes,\n  slayer, ...slayer.archetypes,\n  sorcerer, ...sorcerer.archetypes,\n  warpriest, ...warpriest.archetypes,\n  witch, ...witch.archetypes,\n  wizard, ...wizard.archetypes,\n];\n","import aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Class } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const cl = get(classListState).find(({ id }) => id === identifier);\n      if (cl) return cl;\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const race = get(raceListState).find(({ id }) => id === identifier);\n      if (race) return race;\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  ${({ disabled }) => disabled && css`\n    border: ${rem(1)} solid #e6e1dd;\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell, TableCellProps } from './TableCell';\n\nconst bonusColour = '#969d76';\nconst penaltyColour = '#ba847c';\nconst selectedColour = '#926a82';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  penalty?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  text-align: center;\n  cursor: ${({ disabled }) => disabled ? 'default' : 'pointer'};\n\n  ${({ bonus }) => bonus && css`\n    background: ${bonusColour};\n    color: white;\n  `}\n\n  ${({ penalty }) => penalty && css`\n    background: ${penaltyColour};\n    color: white;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: ${selectedColour};\n    border: ${rem(1)} inset #aca195;\n    color: white;\n  `}\n\n  ${({ bonus, penalty, selected }) => (bonus || penalty) && selected && css`\n    background: -webkit-linear-gradient(\n      145deg, ${bonus ? bonusColour : penaltyColour} 30%, ${selectedColour} 40%\n    );\n  `}\n`;\n\nexport interface AbilityScoreTableCellProps extends ScoreProps {\n  score: number;\n  onSelect?: () => void;\n}\n\nexport const AbilityScoreTableCell: FC<AbilityScoreTableCellProps> = ({\n  score,\n  bonus,\n  penalty,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    penalty={penalty}\n    disabled={disabled}\n    selected={selected}\n    onClick={() => onSelect && onSelect()}\n    width={20}\n  >\n    {score}\n  </Score>\n);\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Ability, AbilityScores, Build } from '../../models';\nimport { raceState } from '../../state';\nimport { AbilityScoreTableCell } from './AbilityScoreTableCell';\n\nexport interface AbilityScoreTableCellsProps {\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  level: number;\n  raceId: number;\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const AbilityScoreTableCells: FC<AbilityScoreTableCellsProps> = ({\n  abilityScores,\n  abilityScoreIncreases,\n  level,\n  raceId,\n  updateBuild,\n}) => {\n  const {\n    abilityScoreChoiceIncrease: racialLevelOneIncrease = 0,\n    abilityScores: racialAbilityScoreIncreases = {},\n  } = useRecoilValue(raceState(raceId));\n\n  const changeAbilityScoreIncrease = (ability: Ability): void => {\n    updateBuild({\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        [level]: ability,\n      },\n    });\n  };\n\n  const calculateAbilityScore = (ability: Ability): number => {\n    const levelOneIncrease = abilityScoreIncreases[1] === ability && racialLevelOneIncrease || 0;\n    const regularIncreases = [4, 8, 12, 16, 20].filter(n => n <= level).filter(key => (\n      abilityScoreIncreases[key.toString()] === ability\n    )).length;\n\n    const racialAbilityIncrease = racialAbilityScoreIncreases[ability] || 0;\n\n    return abilityScores[ability] + racialAbilityIncrease + levelOneIncrease + regularIncreases;\n  };\n\n  const hasBonus = (ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial > 0) return true;\n    }\n\n    return false;\n  };\n\n  const hasPenalty = (ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial < 0) return true;\n    }\n\n    return false;\n  };\n\n  const disabled = level % 4 !== 0 && !(!!racialLevelOneIncrease && level === 1);\n\n  return (\n    <>\n      {(Object.keys(abilityScores) as Ability[]).map(ability => disabled\n        ? (\n          <AbilityScoreTableCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n          />\n        ) : (\n          <AbilityScoreTableCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n            selected={abilityScoreIncreases[level] === ability}\n            onSelect={() => changeAbilityScoreIncrease(ability)}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { classListState } from '../../state/class.state';\nimport { TableCell } from './TableCell';\nimport { TableSelect } from './TableSelect';\n\nexport interface ClassTableCellProps {\n  classId: number;\n  classCount?: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassTableCell: FC<ClassTableCellProps> = ({ classId, classCount, onChange }) => {\n  const classes = useRecoilValue(classListState);\n\n  return (\n    <TableCell>\n      <TableSelect\n        name=\"class\"\n        value={classId}\n        onChange={e => onChange && onChange(parseInt(e.target.value))}\n      >\n        {classes.map(({ id, name }) => (\n          <option key={id} value={id}>\n            {`${name}${classCount && id === classId ? ` (${classCount})` : ''}`}\n          </option>\n        ))}\n      </TableSelect>\n    </TableCell>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { buildState } from '../../state/build.state';\nimport { Build, Character } from '../../models';\nimport { AbilityScoreTableCells } from './AbilityScoreTableCells';\nimport { TableCell } from './TableCell';\nimport { TableRow } from './TableRow';\nimport { ClassTableCell } from './ClassTableCell';\nimport { TableSelect } from './TableSelect';\n\nconst Table = styled.table`\n  width: 100%;\n\n  th {\n    text-align: left;\n  }\n`;\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores, race } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  if (!build) return null;\n\n  const { abilityScoreIncreases, classes, feats } = build;\n\n  const updateBuild = (data: Partial<Build>) => {\n    console.log('Updating build...', data);\n    setBuild({\n      ...build,\n      ...data,\n    });\n  };\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th />\n            <th>Class</th>\n            <th colSpan={Object.keys(abilityScores).length} />\n            <th>Feats (general)</th>\n            <th colSpan={2}>Feats (bonus)</th>\n            <th>Traits</th>\n          </tr>\n        </thead>\n        <tbody>\n          {(Object.entries(classes) as unknown as [string, number][]).map(([level, classId]) => (\n            <TableRow key={`${classId}-${level}`}>\n              <LevelCell>{level}</LevelCell>\n              <ClassTableCell\n                classId={classId}\n                classCount={(\n                  Object.values(classes).slice(0, parseInt(level)).filter(c => c === classId).length\n                )}\n                onChange={newClassId => updateBuild({\n                  classes: { ...classes, [level]: newClassId },\n                })}\n              />\n              <AbilityScoreTableCells\n                abilityScores={abilityScores}\n                abilityScoreIncreases={abilityScoreIncreases}\n                level={parseInt(level)}\n                raceId={race}\n                updateBuild={updateBuild}\n              />\n              <TableCell disabled={parseInt(level) % 2 === 0}>\n                {parseInt(level) % 2 !== 0 && (\n                  <TableSelect name=\"feat\">\n                    <option>\n                      {feats[level] && feats[level].general}\n                    </option>\n                  </TableSelect>\n                )}\n              </TableCell>\n              <TableCell>\n                {feats[level] && feats[level].bonus1}\n              </TableCell>\n              <TableCell>\n                {feats[level] && feats[level].bonus2}\n              </TableCell>\n              <TableCell></TableCell>\n            </TableRow>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from '../common';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScores: racialAbilityScoreIncreases,\n  } = useRecoilValue(raceState(raceId));\n\n  const onChange = (ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  };\n\n  const getModForAbility = (ability: Ability): number => (\n    racialAbilityScoreIncreases ? racialAbilityScoreIncreases[ability] || 0 : 0\n  );\n\n  const getIncreaseAsString = (increase: number) => (\n    increase === 0\n      ? ''\n      : increase > 0 ? `+${increase}` : increase\n  );\n\n  return (\n    <AbilityScoresWrapper>\n      {(Object.entries(abilityScores) as [Ability, number][]).map(([ability, score]) => (\n        <Field key={ability} width={40}>\n          <select\n            name={ability}\n            value={score}\n            onChange={e => onChange(ability, parseInt(e.target.value))}\n          >\n            {Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={ability}>\n            {`${ability.toUpperCase()} ${getIncreaseAsString(getModForAbility(ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC, KeyboardEvent, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { baseRaceListSelector } from '../../state';\nimport { Field } from '../common';\nimport { BaseAbilityScores } from './BaseAbilityScores';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n  const races = useRecoilValue(baseRaceListSelector);\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const handleKeyDown = ({ key }: KeyboardEvent<HTMLInputElement>, data: Partial<Character>) => {\n    if (key === 'Enter') updateCharacter(data);\n  };\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <Field>\n        <select\n          name=\"race\"\n          value={race}\n          onChange={e => updateCharacter({ race: parseInt(e.target.value ) })}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </Field>\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { BuildTable } from '../table';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds: [buildId] } = character;\n\n  const updateCharacter = (data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  };\n\n  if (buildId === undefined) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={buildId} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <CharacterSheet id={0} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}