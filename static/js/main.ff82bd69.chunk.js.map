{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","components/build/table/TableCell.tsx","components/build/table/TableRow.tsx","components/build/table/TableSelect.tsx","components/build/abilityScores/AbilityScoreCell.tsx","components/build/abilityScores/AbilityScoreCellArray.tsx","components/build/class/ClassCell.tsx","components/build/level/LevelRow.tsx","components/build/BuildTable.tsx","assets/sheet.jpg","models/class/class.primary.ts","components/character/Field.tsx","analytics/reportWebVitals.ts","components/character/BaseAbilityScores.tsx","components/character/CharacterRace.tsx","components/character/BaseInformation.tsx","components/character/CharacterSheet.tsx","App/Nav.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","mergeClassArchetypes","primary","archetypes","map","archetype","base","id","primaryClasses","alchemist","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","buildState","atomFamily","selectorFamily","identifier","find","characterListState","selectedCharacterState","characterState","character","name","Error","classListState","primaryClassListSelector","filter","c","archetypeListSelector","prestigeClassListSelector","maxLevel","classState","cl","archetypesState","baseId","raceListState","baseRaceListSelector","r","raceHeritageListSelector","raceState","allRaces","race","baseRace","racialHeritagesState","TableCell","td","disabled","css","TableRow","tr","TableSelect","select","bonusColour","penaltyColour","selectedColour","Score","bonus","penalty","selected","Button","button","AbilityScoreCell","score","onSelect","width","onClick","tabIndex","AbilityScoreCellArray","abilityScores","abilityScoreIncreases","level","updateBuild","abilityScoreChoiceIncrease","racialLevelOneIncrease","racialAbilityScoreIncreases","changeAbilityScoreIncrease","useCallback","ability","calculateAbilityScore","racialAbilityIncrease","levelOneIncrease","regularIncreases","n","toString","length","hasBonus","racial","hasPenalty","useMemo","Object","keys","ClassCell","onChange","useRecoilValue","hasArchetypes","value","e","parseInt","target","LevelCell","LevelRow","classId","classLevel","feats","general","bonus1","bonus2","currentClass","changeClass","newClassId","Table","table","BuildTable","buildId","raceId","useRecoilState","build","setBuild","skills","data","console","log","getClassLevelAtLevel","values","slice","getAbilityScoreIncreasesAtLevel","increases","iLevel","colSpan","entries","BaseAttackBonusProgression","SavingThrowProgression","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","onPerfEntry","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","updateCharacter","newValue","getModForAbility","getIncreaseAsString","increase","Array","from","_","htmlFor","toUpperCase","CharacterRace","heritages","hasRacialHeritages","InformationSection","section","BaseInformation","useState","nameVal","setNameVal","changeRace","newRaceId","handleKeyDown","type","placeholder","onKeyDown","Number","a","Sheet","article","sheet","CharacterSheet","setCharacter","Nav","useSetRecoilState","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.ff82bd69.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\nimport lann from './lann.character.json';\n\nexport const characters = [\n  seelah,\n  lann,\n];\n","import { Archetype, Class, PrimaryClass } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\nconst mergeClassArchetypes = (\n  primary: Class,\n  archetypes: Partial<Archetype>[],\n): Archetype[] => (\n  archetypes.map(archetype => (\n    {\n      base: primary.id,\n      ...primary,\n      ...archetype,\n    }\n  ))\n);\n\nexport const primaryClasses: PrimaryClass[] = [\n  alchemist.primary,\n  arcanist.primary,\n  barbarian.primary,\n  bard.primary,\n  bloodrager.primary,\n  cavalier.primary,\n  cleric.primary,\n  druid.primary,\n  fighter.primary,\n  hunter.primary,\n  inquisitor.primary,\n  kineticist.primary,\n  magus.primary,\n  monk.primary,\n  oracle.primary,\n  paladin.primary,\n  ranger.primary,\n  rogue.primary,\n  shaman.primary,\n  skald.primary,\n  slayer.primary,\n  sorcerer.primary,\n  warpriest.primary,\n  witch.primary,\n  wizard.primary,\n];\n\nexport const archetypes: Archetype[] = [\n  ...mergeClassArchetypes(alchemist.primary, alchemist.archetypes),\n  ...mergeClassArchetypes(arcanist.primary, arcanist.archetypes),\n  ...mergeClassArchetypes(barbarian.primary, barbarian.archetypes),\n  ...mergeClassArchetypes(bard.primary, bard.archetypes),\n  ...mergeClassArchetypes(bloodrager.primary, bloodrager.archetypes),\n  ...mergeClassArchetypes(cavalier.primary, cavalier.archetypes),\n  ...mergeClassArchetypes(cleric.primary, cleric.archetypes),\n  ...mergeClassArchetypes(druid.primary, druid.archetypes),\n  ...mergeClassArchetypes(fighter.primary, fighter.archetypes),\n  ...mergeClassArchetypes(hunter.primary, hunter.archetypes),\n  ...mergeClassArchetypes(inquisitor.primary, inquisitor.archetypes),\n  ...mergeClassArchetypes(kineticist.primary, kineticist.archetypes),\n  ...mergeClassArchetypes(magus.primary, magus.archetypes),\n  ...mergeClassArchetypes(monk.primary, monk.archetypes),\n  ...mergeClassArchetypes(oracle.primary, oracle.archetypes),\n  ...mergeClassArchetypes(paladin.primary, paladin.archetypes),\n  ...mergeClassArchetypes(ranger.primary, ranger.archetypes),\n  ...mergeClassArchetypes(rogue.primary, rogue.archetypes),\n  ...mergeClassArchetypes(shaman.primary, shaman.archetypes),\n  ...mergeClassArchetypes(skald.primary, skald.archetypes),\n  ...mergeClassArchetypes(slayer.primary, slayer.archetypes),\n  ...mergeClassArchetypes(sorcerer.primary, sorcerer.archetypes),\n  ...mergeClassArchetypes(warpriest.primary, warpriest.archetypes),\n  ...mergeClassArchetypes(witch.primary, witch.archetypes),\n  ...mergeClassArchetypes(wizard.primary, wizard.archetypes),\n];\n","import { PrestigeClass } from '../../../../models';\nimport aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses: PrestigeClass[] = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { archetypes, primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses, ...archetypes,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const selectedCharacterState = atom<number>({\n  key: 'selectedCharacter/state',\n  default: 0,\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Archetype, Class, PrestigeClass, PrimaryClass } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const primaryClassListSelector = selector<PrimaryClass[]>({\n  key: 'primaryClassList/selector',\n  get: ({ get }) => (get(classListState) as PrimaryClass[]).filter(c => c.archetypes),\n});\n\nexport const archetypeListSelector = selector<Archetype[]>({\n  key: 'archetypeList/selector',\n  get: ({ get }) => (get(classListState) as Archetype[]).filter(c => c.base),\n});\n\nexport const prestigeClassListSelector = selector<PrestigeClass[]>({\n  key: 'prestigeClassList/selector',\n  get: ({ get }) => (get(classListState) as PrestigeClass[]).filter(c => c.maxLevel),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const cl = get(classListState).find(({ id }) => id === identifier);\n      if (cl) return cl;\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const archetypesState = atomFamily<Archetype[], number>({\n  key: 'archetypes/state',\n  default: selectorFamily<Archetype[], number>({\n    key: 'archetypes/selector',\n    get: baseId => ({ get }) => get(archetypeListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const allRaces = get(raceListState);\n      const race = allRaces.find(({ id }) => id === identifier);\n\n      if (race) {\n        const base = (race as Heritage).base;\n        if (!base) return race;\n\n        const baseRace = allRaces.find(({ id }) => id === base);\n        return {\n          ...baseRace,\n          ...race,\n        };\n      }\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const racialHeritagesState = atomFamily<Heritage[], number>({\n  key: 'racialHeritages/state',\n  default: selectorFamily<Heritage[], number>({\n    key: 'racialHeritages/selector',\n    get: baseId => ({ get }) => get(raceHeritageListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  ${({ disabled }) => disabled && css`\n    border: ${rem(1)} solid #e6e1dd;\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell, TableCellProps } from '../table';\n\nconst bonusColour = '#969d76';\nconst penaltyColour = '#ba847c';\nconst selectedColour = '#926a82';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  penalty?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  line-height: 1;\n  text-align: center;\n\n  ${({ bonus }) => bonus && css`\n    background: ${bonusColour};\n    color: white;\n  `}\n\n  ${({ penalty }) => penalty && css`\n    background: ${penaltyColour};\n    color: white;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: ${selectedColour};\n    border: ${rem(1)} inset #aca195;\n    color: white;\n  `}\n\n  ${({ bonus, penalty, selected }) => (bonus || penalty) && selected && css`\n    background: -webkit-linear-gradient(\n      145deg, ${bonus ? bonusColour : penaltyColour} 30%, ${selectedColour} 40%\n    );\n  `}\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: ${({ disabled }) => disabled ? 'default' : 'pointer'};\n`;\n\nexport interface AbilityScoreCellProps extends ScoreProps {\n  score: number;\n  onSelect?: () => void;\n}\n\nexport const AbilityScoreCell: FC<AbilityScoreCellProps> = ({\n  score,\n  bonus,\n  penalty,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    penalty={penalty}\n    disabled={disabled}\n    selected={selected}\n    width={20}\n  >\n    <Button\n      disabled={disabled}\n      onClick={() => onSelect && onSelect()}\n      tabIndex={disabled ? -1 : 0}\n    >\n      {score}\n    </Button>\n  </Score>\n);\n","import React, { FC, useCallback, useMemo } from 'react';\n\nimport { Ability, AbilityScores, Build, Race } from '../../../models';\nimport { AbilityScoreCell } from './AbilityScoreCell';\n\nexport interface AbilityScoreCellArrayProps {\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  level: number;\n  race: Race;\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const AbilityScoreCellArray: FC<AbilityScoreCellArrayProps> = ({\n  abilityScores,\n  abilityScoreIncreases,\n  level,\n  race,\n  updateBuild,\n}) => {\n  const {\n    abilityScoreChoiceIncrease: racialLevelOneIncrease = 0,\n    abilityScores: racialAbilityScoreIncreases = {},\n  } = race;\n\n  const changeAbilityScoreIncrease = useCallback((ability: Ability): void => {\n    updateBuild({\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        [level]: ability,\n      },\n    });\n  }, [abilityScoreIncreases, level]);\n\n  const calculateAbilityScore = useCallback((ability: Ability): number => {\n    const racialAbilityIncrease = racialAbilityScoreIncreases[ability] || 0;\n    const levelOneIncrease = abilityScoreIncreases[1] === ability && racialLevelOneIncrease || 0;\n    const regularIncreases = [4, 8, 12, 16, 20].filter(n => n <= level).filter(key => (\n      abilityScoreIncreases[key.toString()] === ability\n    )).length;\n\n    return abilityScores[ability] + racialAbilityIncrease + levelOneIncrease + regularIncreases;\n  }, [abilityScores, abilityScoreIncreases, racialLevelOneIncrease, racialAbilityScoreIncreases]);\n\n  const hasBonus = useCallback((ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial > 0) return true;\n    }\n\n    return false;\n  }, [racialAbilityScoreIncreases]);\n\n  const hasPenalty = useCallback((ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial < 0) return true;\n    }\n\n    return false;\n  }, [racialAbilityScoreIncreases]);\n\n  const disabled = useMemo(() => (\n    level % 4 !== 0 && !(!!racialLevelOneIncrease && level === 1)\n  ), [level, racialLevelOneIncrease]);\n\n  return (\n    <>\n      {(Object.keys(abilityScores) as Ability[]).map(ability => disabled\n        ? (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n          />\n        ) : (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n            selected={abilityScoreIncreases[level] === ability}\n            onSelect={() => changeAbilityScoreIncrease(ability)}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Archetype, Class } from '../../../models';\nimport {\n  archetypesState,\n  prestigeClassListSelector,\n  primaryClassListSelector,\n} from '../../../state';\nimport { TableCell, TableSelect } from '../table';\n\nexport interface ClassCellProps {\n  cl: Class;\n  classLevel: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassCell: FC<ClassCellProps> = ({ cl, onChange }) => {\n  const { id } = cl;\n  const base = (cl as Archetype).base || id;\n  const primaryClasses = useRecoilValue(primaryClassListSelector);\n  const archetypes = useRecoilValue(archetypesState(base));\n  const prestigeClasses = useRecoilValue(prestigeClassListSelector);\n  const hasArchetypes = archetypes.length > 0;\n\n  return (\n    <>\n      <TableCell>\n        <TableSelect\n          name=\"class\"\n          value={base}\n          onChange={e => onChange && onChange(parseInt(e.target.value) || id)}\n        >\n          <option />\n          {[...primaryClasses, ...prestigeClasses].map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </TableSelect>\n      </TableCell>\n      <TableCell disabled={!hasArchetypes}>\n        {hasArchetypes && (\n          <TableSelect\n            name=\"archetype\"\n            value={id}\n            onChange={({ target: { value }}) => onChange && onChange(parseInt(value) || base)}\n          >\n            <option />\n            {archetypes.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </TableSelect>\n        )}\n      </TableCell>\n    </>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { AbilityScores, Build, Race } from '../../../models';\nimport { classState } from '../../../state';\nimport { AbilityScoreCellArray } from '../abilityScores';\nimport { ClassCell } from '../class';\nimport { TableCell, TableRow, TableSelect } from '../table';\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface LevelRowProps {\n  race: Race;\n  level: number;\n  classId: number;\n  classLevel: number;\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  feats?: {\n    general?: string;\n    bonus1?: string;\n    bonus2?: string;\n  };\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const LevelRow: FC<LevelRowProps> = ({\n  race,\n  level,\n  classId,\n  classLevel,\n  abilityScores,\n  abilityScoreIncreases,\n  feats: {\n    general,\n    bonus1,\n    bonus2,\n  } = {},\n  updateBuild,\n}) => {\n  const currentClass = useRecoilValue(classState(classId));\n  const changeClass = useCallback((newClassId: number) => (\n    updateBuild({ classes: { [level]: newClassId }})\n  ), [level]);\n\n  return (\n    <TableRow>\n      <LevelCell>{level}</LevelCell>\n      <ClassCell cl={currentClass} classLevel={classLevel} onChange={changeClass} />\n      <AbilityScoreCellArray\n        abilityScores={abilityScores}\n        abilityScoreIncreases={abilityScoreIncreases}\n        level={level}\n        race={race}\n        updateBuild={updateBuild}\n      />\n      <TableCell disabled={level % 2 === 0}>\n        {level % 2 !== 0 && (\n          <TableSelect name=\"generalFeat\">\n            <option>\n              {general}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus1}>\n        {!!bonus1 && (\n          <TableSelect name=\"bonusFeat1\">\n            <option>\n              {bonus1}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus2}>\n        {!!bonus2 && (\n          <TableSelect name=\"bonusFeat2\">\n            <option>\n              {bonus2}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell></TableCell>\n    </TableRow>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Build, Character } from '../../models';\nimport { buildState, raceState } from '../../state';\nimport { LevelRow } from './level';\n\nconst Table = styled.table`\n  width: 100%;\n\n  th {\n    text-align: left;\n  }\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores, race: raceId } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  const race = useRecoilValue(raceState(raceId));\n\n  if (!build) return null;\n\n  const {\n    abilityScoreIncreases,\n    classes,\n    feats,\n    skills,\n  } = build;\n\n  const updateBuild = useCallback((data: Partial<Build>) => {\n    console.log('Updating build...', data);\n    setBuild({\n      ...build,\n      ...data,\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        ...data.abilityScoreIncreases,\n      },\n      classes: {\n        ...classes,\n        ...data.classes,\n      },\n      feats: {\n        ...feats,\n        ...data.feats,\n      },\n      skills: {\n        ...skills,\n        ...data.skills,\n      },\n    });\n  }, [build, setBuild]);\n\n  const getClassLevelAtLevel = useCallback((classId: number, level: number) => (\n    Object.values(classes).slice(0, level).filter(id => id === classId).length\n  ), [classes]);\n\n  const getAbilityScoreIncreasesAtLevel = useCallback((level: string) => (\n    Object.keys(abilityScoreIncreases).filter(key => (\n      key <= level\n    )).reduce((increases, iLevel) => ({\n      ...increases,\n      [iLevel]: abilityScoreIncreases[iLevel],\n    }), {})\n  ), [abilityScoreIncreases]);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th />\n          <th>Class</th>\n          <th>Archetype</th>\n          <th colSpan={Object.keys(abilityScores).length} />\n          <th>Feats (general)</th>\n          <th colSpan={2}>Feats (bonus)</th>\n          <th>Traits</th>\n        </tr>\n      </thead>\n      <tbody>\n        {(Object.entries(classes) as [string, number][]).map((\n          [level, classId],\n        ) => (\n          <LevelRow\n            key={level}\n            race={race}\n            level={parseInt(level)}\n            classId={classId}\n            classLevel={getClassLevelAtLevel(classId, parseInt(level))}\n            abilityScores={abilityScores}\n            abilityScoreIncreases={getAbilityScoreIncreasesAtLevel(level)}\n            feats={feats[level]}\n            updateBuild={updateBuild}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import { ClassLevel, Levels } from '../level';\nimport { Prerequisite } from './class.prerequisite';\n\nexport enum BaseAttackBonusProgression {\n  Half = 0.5,\n  Average = 0.75,\n  Full = 1,\n}\n\nexport enum SavingThrowProgression {\n  Low,\n  High,\n  PrestigeLow,\n  PrestigeHigh,\n}\n\nexport interface Class {\n  id: number;\n  name: string;\n  levels: Levels<ClassLevel>;\n  progression: {\n    baseAttackBonus: BaseAttackBonusProgression;\n    fortitude: SavingThrowProgression;\n    reflex: SavingThrowProgression;\n    will: SavingThrowProgression;\n  };\n  prerequisites?: Prerequisite[];\n}\n\nexport interface PrimaryClass extends Class {\n  archetypes: number[];\n}\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from './Field';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScores: racialAbilityScoreIncreases,\n  } = useRecoilValue(raceState(raceId));\n\n  const onChange = useCallback((ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  }, [abilityScores, updateCharacter]);\n\n  const getModForAbility = useCallback((ability: Ability): number => (\n    racialAbilityScoreIncreases ? racialAbilityScoreIncreases[ability] || 0 : 0\n  ), [racialAbilityScoreIncreases]);\n\n  const getIncreaseAsString = useCallback((increase: number) => (\n    increase === 0\n      ? ''\n      : increase > 0 ? `+${increase}` : increase\n  ), []);\n\n  return (\n    <AbilityScoresWrapper>\n      {(Object.entries(abilityScores) as [Ability, number][]).map(([ability, score]) => (\n        <Field key={ability} width={40}>\n          <select\n            name={ability}\n            value={score}\n            onChange={e => onChange(ability, parseInt(e.target.value))}\n          >\n            {Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={ability}>\n            {`${ability.toUpperCase()} ${getIncreaseAsString(getModForAbility(ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Heritage } from '../../models';\nimport { baseRaceListSelector, raceState, racialHeritagesState } from '../../state';\nimport { Field } from './Field';\n\nexport interface CharacterRaceProps {\n  raceId: number;\n  onChange: (newRaceId: number) => void;\n}\n\nexport const CharacterRace: FC<CharacterRaceProps> = ({ raceId, onChange }) => {\n  const race = useRecoilValue(raceState(raceId));\n  const base = (race as Heritage).base || raceId;\n  const races = useRecoilValue(baseRaceListSelector);\n  const heritages = useRecoilValue(racialHeritagesState(base));\n  const hasRacialHeritages = heritages.length > 0;\n\n  return (\n    <>\n      <Field>\n        <select\n          name=\"race\"\n          value={base}\n          onChange={({ target: { value }}) => onChange(parseInt(value))}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"race\">Race</label>\n      </Field>\n      {hasRacialHeritages && (\n        <Field>\n          <select\n            name=\"heritage\"\n            value={raceId}\n            onChange={({ target: { value }}) => onChange(parseInt(value) || base)}\n          >\n            <option />\n            {heritages.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n          <label htmlFor=\"heritage\">Heritage</label>\n        </Field>\n      )}\n    </>\n  );\n};\n","import React, { FC, KeyboardEvent, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { BaseAbilityScores } from './BaseAbilityScores';\nimport { CharacterRace } from './CharacterRace';\nimport { Field } from './Field';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const changeRace = useCallback((newRaceId: number) => (\n    updateCharacter({ race: newRaceId })\n  ), [updateCharacter]);\n\n  const handleKeyDown = useCallback((\n    { key }: KeyboardEvent<HTMLInputElement>,\n    data: Partial<Character>,\n  ) => {\n    if (key === 'Enter') updateCharacter(data);\n  }, [updateCharacter]);\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <CharacterRace raceId={race} onChange={changeRace} />\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { BuildTable } from '../build';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds } = character;\n\n  const updateCharacter = useCallback((data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  }, [character, setCharacter]);\n\n  if (!builds || !builds.length) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={builds[0]} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { characterListState, selectedCharacterState } from '../state';\n\nexport const Nav: FC = () => {\n  const characters = useRecoilValue(characterListState);\n  const setCharacter = useSetRecoilState(selectedCharacterState);\n\n  return (\n    <nav>\n      {characters.map(({ id, name }) => (\n        <button key={id} onClick={() => setCharacter(id)}>\n          {name}\n        </button>\n      ))}\n    </nav>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\nimport { selectedCharacterState } from '../state';\nimport { Nav } from './Nav';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <Nav />\n    <CharacterSheet id={useRecoilValue(selectedCharacterState)} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}