{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","services/data/builds/index.ts","services/data/characters/index.ts","services/data/classes/primary/index.ts","services/data/classes/prestige/index.ts","services/data/classes/index.ts","services/data/races/index.ts","state/build.state.ts","services/build.service.ts","state/character.state.ts","services/character.service.ts","state/class.state.ts","services/class.service.ts","state/race.state.ts","services/race.service.ts","components/build/table/TableCell.tsx","components/build/table/TableRow.tsx","components/build/table/TableSelect.tsx","components/build/abilityScores/AbilityScoreCell.tsx","components/build/abilityScores/AbilityScoreCellArray.tsx","components/build/class/ClassCell.tsx","models/class/class.primary.ts","analytics/reportWebVitals.ts","components/build/level/StatProgressionArray.tsx","components/build/level/LevelRow.tsx","components/build/BuildTable.tsx","assets/sheet.jpg","components/character/Field.tsx","components/character/BaseAbilityScores.tsx","components/character/CharacterRace.tsx","components/character/BaseInformation.tsx","components/character/CharacterSheet.tsx","App/Nav.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","HeaderWrapper","header","Header","title","shortTitle","split","reduce","short","word","builds","characters","getPrimaryClass","data","primary","archetypes","map","id","mergeClassArchetypes","archetype","base","primaryClasses","alchemist","arcanist","barbarian","bard","bloodrager","cavalier","cleric","druid","fighter","hunter","inquisitor","kineticist","magus","monk","oracle","paladin","ranger","rogue","shaman","skald","slayer","sorcerer","warpriest","witch","wizard","prestigeClasses","classes","races","human","elf","dwarf","gnome","halfling","halfElf","halfOrc","aasimar","tiefling","oread","dhampir","kitsune","succubus","buildListState","atom","key","default","selector","get","buildState","atomFamily","selectorFamily","identifier","find","characterListState","selectedCharacterState","characterState","character","name","Error","classListState","primaryClassListSelector","filter","c","archetypeListSelector","prestigeClassListSelector","maxLevel","classState","cl","archetypesState","baseId","raceListState","baseRaceListSelector","r","raceHeritageListSelector","raceState","allRaces","race","baseRace","racialHeritagesState","TableCell","td","disabled","css","TableRow","tr","TableSelect","select","bonusColour","penaltyColour","selectedColour","Score","bonus","penalty","selected","Button","button","AbilityScoreCell","score","onSelect","width","onClick","tabIndex","AbilityScoreCellArray","abilityScores","abilityScoreIncreases","level","updateBuild","abilityScoreChoiceIncrease","racialLevelOneIncrease","racialAbilityScoreIncreases","changeAbilityScoreIncrease","useCallback","ability","calculateAbilityScore","racialAbilityIncrease","levelOneIncrease","regularIncreases","Object","keys","toString","length","hasBonus","racial","hasPenalty","useMemo","ClassCell","onChange","useRecoilValue","hasArchetypes","value","e","parseInt","target","BaseAttackBonusProgression","SavingThrowProgression","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","onPerfEntry","calculateSavingThrowBonus","levels","progression","Low","Math","floor","High","PrestigeLow","ceil","PrestigeHigh","StatCell","StatProgressionArray","classIds","uniqueClasses","includes","calculateStats","stats","baseAttackBonus","fortitude","reflex","will","classLevels","classId","bab","calculateBaseAttackBonus","fort","ref","LevelCell","LevelRow","feats","general","bonus1","bonus2","currentClass","getClassLevel","classLevel","newClassId","Table","table","BuildTable","buildId","raceId","useRecoilState","build","setBuild","skills","console","log","getClassesAtLevel","values","slice","getAbilityScoreIncreasesAtLevel","increases","iLevel","colSpan","entries","Field","fieldset","unsaved","AbilityScoresWrapper","div","BaseAbilityScores","updateCharacter","newValue","getModForAbility","getIncreaseAsString","increase","Array","from","_","n","htmlFor","toUpperCase","CharacterRace","heritages","hasRacialHeritages","InformationSection","section","BaseInformation","useState","nameVal","setNameVal","changeRace","newRaceId","handleKeyDown","type","placeholder","onKeyDown","Number","a","Sheet","article","sheet","CharacterSheet","setCharacter","Nav","useSetRecoilState","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.51f31717.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-family: sans-serif;\n  font-size: ${rem(60)};\n  text-align: center;\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n\n  @media (max-width: 1200px) {\n    font-size: ${rem(46)};\n    -webkit-text-stroke-width: ${rem(2)};\n  }\n`;\n\nconst HeaderWrapper = styled.header`\n  ${Heading}:last-child {\n      display: none;\n    }\n\n  @media (max-width: 768px) {\n    ${Heading}:first-child {\n      display: none;\n    }\n\n    ${Heading}:last-child {\n      display: flex;\n    }\n  }\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Build Calculator',\n}) => {\n  const shortTitle = title.split(' ').reduce((short, word) => short + word[0], '');\n\n  return (\n    <HeaderWrapper>\n      <Heading>{title}</Heading>\n      <Heading>{shortTitle}</Heading>\n    </HeaderWrapper>\n  );\n};\n","import { Build } from '../../../models';\n\nimport PennyDreadful from './PennyDreadful.build.json';\n\nexport const builds: Build[] = [\n  PennyDreadful,\n];\n","import seelah from './seelah.character.json';\nimport lann from './lann.character.json';\n\nexport const characters = [\n  seelah,\n  lann,\n];\n","import { Archetype, Class, PrimaryClass } from '../../../../models';\n\nimport alchemist from './alchemist.class.json';\nimport arcanist from './arcanist.class.json';\nimport barbarian from './barbarian.class.json';\nimport bard from './bard.class.json';\nimport bloodrager from './bloodrager.class.json';\nimport cavalier from './cavalier.class.json';\nimport cleric from './cleric.class.json';\nimport druid from './druid.class.json';\nimport fighter from './fighter.class.json';\nimport hunter from './hunter.class.json';\nimport inquisitor from './inquisitor.class.json';\nimport kineticist from './kineticist.class.json';\nimport magus from './magus.class.json';\nimport monk from './monk.class.json';\nimport oracle from './oracle.class.json';\nimport paladin from './paladin.class.json';\nimport ranger from './ranger.class.json';\nimport rogue from './rogue.class.json';\nimport shaman from './shaman.class.json';\nimport skald from './skald.class.json';\nimport slayer from './slayer.class.json';\nimport sorcerer from './sorcerer.class.json';\nimport warpriest from './warpriest.class.json';\nimport witch from './witch.class.json';\nimport wizard from './wizard.class.json';\n\nconst getPrimaryClass = (\n  data: {\n    primary: Class,\n    archetypes: Partial<Archetype>[],\n  },\n): PrimaryClass => ({\n  ...data.primary,\n  archetypes: data.archetypes.map(({ id }) => id as number),\n});\n\nconst mergeClassArchetypes = (\n  primary: Class,\n  archetypes: Partial<Archetype>[],\n): Archetype[] => (\n  archetypes.map(archetype => (\n    {\n      base: primary.id,\n      ...primary,\n      ...archetype,\n    }\n  ))\n);\n\nexport const primaryClasses: PrimaryClass[] = [\n  getPrimaryClass(alchemist),\n  getPrimaryClass(arcanist),\n  getPrimaryClass(barbarian),\n  getPrimaryClass(bard),\n  getPrimaryClass(bloodrager),\n  getPrimaryClass(cavalier),\n  getPrimaryClass(cleric),\n  getPrimaryClass(druid),\n  getPrimaryClass(fighter),\n  getPrimaryClass(hunter),\n  getPrimaryClass(inquisitor),\n  getPrimaryClass(kineticist),\n  getPrimaryClass(magus),\n  getPrimaryClass(monk),\n  getPrimaryClass(oracle),\n  getPrimaryClass(paladin),\n  getPrimaryClass(ranger),\n  getPrimaryClass(rogue),\n  getPrimaryClass(shaman),\n  getPrimaryClass(skald),\n  getPrimaryClass(slayer),\n  getPrimaryClass(sorcerer),\n  getPrimaryClass(warpriest),\n  getPrimaryClass(witch),\n  getPrimaryClass(wizard),\n];\n\nexport const archetypes: Archetype[] = [\n  ...mergeClassArchetypes(alchemist.primary, alchemist.archetypes),\n  ...mergeClassArchetypes(arcanist.primary, arcanist.archetypes),\n  ...mergeClassArchetypes(barbarian.primary, barbarian.archetypes),\n  ...mergeClassArchetypes(bard.primary, bard.archetypes),\n  ...mergeClassArchetypes(bloodrager.primary, bloodrager.archetypes),\n  ...mergeClassArchetypes(cavalier.primary, cavalier.archetypes),\n  ...mergeClassArchetypes(cleric.primary, cleric.archetypes),\n  ...mergeClassArchetypes(druid.primary, druid.archetypes),\n  ...mergeClassArchetypes(fighter.primary, fighter.archetypes),\n  ...mergeClassArchetypes(hunter.primary, hunter.archetypes),\n  ...mergeClassArchetypes(inquisitor.primary, inquisitor.archetypes),\n  ...mergeClassArchetypes(kineticist.primary, kineticist.archetypes),\n  ...mergeClassArchetypes(magus.primary, magus.archetypes),\n  ...mergeClassArchetypes(monk.primary, monk.archetypes),\n  ...mergeClassArchetypes(oracle.primary, oracle.archetypes),\n  ...mergeClassArchetypes(paladin.primary, paladin.archetypes),\n  ...mergeClassArchetypes(ranger.primary, ranger.archetypes),\n  ...mergeClassArchetypes(rogue.primary, rogue.archetypes),\n  ...mergeClassArchetypes(shaman.primary, shaman.archetypes),\n  ...mergeClassArchetypes(skald.primary, skald.archetypes),\n  ...mergeClassArchetypes(slayer.primary, slayer.archetypes),\n  ...mergeClassArchetypes(sorcerer.primary, sorcerer.archetypes),\n  ...mergeClassArchetypes(warpriest.primary, warpriest.archetypes),\n  ...mergeClassArchetypes(witch.primary, witch.archetypes),\n  ...mergeClassArchetypes(wizard.primary, wizard.archetypes),\n];\n","import { PrestigeClass } from '../../../../models';\nimport aldoriSwordlord from './aldoriSwordlord.class.json';\nimport arcaneTrickster from './arcaneTrickster.class.json';\nimport assassin from './assassin.class.json';\nimport dragonDisciple from './dragonDisciple.class.json';\nimport duelist from './duelist.class.json';\nimport eldritchKnight from './eldritchKnight.class.json';\nimport hellknight from './hellknight.class.json';\nimport hellknightSignifier from './hellknightSignifier.class.json';\nimport loremaster from './loremaster.class.json';\nimport mysticTheurge from './mysticTheurge.class.json';\nimport stalwartDefender from './stalwartDefender.class.json';\nimport studentofWar from './studentofWar.class.json';\nimport winterWitch from './winterWitch.class.json';\n\nexport const prestigeClasses: PrestigeClass[] = [\n  aldoriSwordlord,\n  arcaneTrickster,\n  assassin,\n  dragonDisciple,\n  duelist,\n  eldritchKnight,\n  hellknight,\n  hellknightSignifier,\n  loremaster,\n  mysticTheurge,\n  stalwartDefender,\n  studentofWar,\n  winterWitch,\n];\n","import { Class } from '../../../models';\n\nimport { archetypes, primaryClasses } from './primary';\nimport { prestigeClasses } from './prestige';\n\nexport const classes: Class[] = [\n  ...primaryClasses, ...archetypes,\n  ...prestigeClasses,\n];\n","import { Race } from '../../../models';\n\nimport human from './human.race.json';\nimport elf from './elf.race.json';\nimport dwarf from './dwarf.race.json';\nimport gnome from './gnome.race.json';\nimport halfling from './halfling.race.json';\nimport halfElf from './halfElf.race.json';\nimport halfOrc from './halfOrc.race.json';\nimport aasimar from './aasimar.race.json';\nimport tiefling from './tiefling.race.json';\nimport oread from './oread.race.json';\nimport dhampir from './dhampir.race.json';\nimport kitsune from './kitsune.race.json';\nimport succubus from './succubus.race.json';\n\nexport const races: Race[] = [\n  ...human,\n  ...elf,\n  ...dwarf,\n  ...gnome,\n  ...halfling,\n  ...halfElf,\n  ...halfOrc,\n  ...aasimar,\n  ...tiefling,\n  ...oread,\n  ...dhampir,\n  ...kitsune,\n  ...succubus,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllBuilds } from '../services';\nimport { Build } from '../models';\n\nexport const buildListState = atom<Build[]>({\n  key: 'buildList/state',\n  default: selector<Build[]>({\n    key: 'buildList/selector',\n    get: getAllBuilds,\n  }),\n});\n\nexport const buildState = atomFamily<Build | undefined, number>({\n  key: 'build/state',\n  default: selectorFamily<Build | undefined, number>({\n    key: 'build/selector',\n    get: identifier => ({ get }) => get(buildListState).find(({ id }) => id === identifier),\n  }),\n});\n","import { Build } from '../models';\nimport { builds } from './data';\n\nexport const getAllBuilds = (): Build[] => [...builds];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../services';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const selectedCharacterState = atom<number>({\n  key: 'selectedCharacter/state',\n  default: 0,\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import { Character } from '../models';\nimport { characters } from './data';\n\nexport const getAllCharacters = (): Character[] => [...characters];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Archetype, Class, PrestigeClass, PrimaryClass } from '../models';\nimport { getAllClasses } from '../services';\n\nexport const classListState = atom<Class[]>({\n  key: 'classList/state',\n  default: selector<Class[]>({\n    key: 'classList/selector',\n    get: getAllClasses,\n  }),\n});\n\nexport const primaryClassListSelector = selector<PrimaryClass[]>({\n  key: 'primaryClassList/selector',\n  get: ({ get }) => (get(classListState) as PrimaryClass[]).filter(c => c.archetypes),\n});\n\nexport const archetypeListSelector = selector<Archetype[]>({\n  key: 'archetypeList/selector',\n  get: ({ get }) => (get(classListState) as Archetype[]).filter(c => c.base),\n});\n\nexport const prestigeClassListSelector = selector<PrestigeClass[]>({\n  key: 'prestigeClassList/selector',\n  get: ({ get }) => (get(classListState) as PrestigeClass[]).filter(c => c.maxLevel),\n});\n\nexport const classState = atomFamily<Class, number>({\n  key: 'class/state',\n  default: selectorFamily<Class, number>({\n    key: 'class/selector',\n    get: identifier => ({ get }) => {\n      const cl = get(classListState).find(({ id }) => id === identifier);\n      if (cl) return cl;\n\n      throw new Error(`No class found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const archetypesState = atomFamily<Archetype[], number>({\n  key: 'archetypes/state',\n  default: selectorFamily<Archetype[], number>({\n    key: 'archetypes/selector',\n    get: baseId => ({ get }) => get(archetypeListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Class } from '../models';\nimport { classes } from './data';\n\nexport const getAllClasses = (): Class[] => [\n  ...classes,\n];\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { Heritage, Race } from '../models';\nimport { getAllRaces } from '../services';\n\nexport const raceListState = atom<Race[]>({\n  key: 'raceList/state',\n  default: selector<Race[]>({\n    key: 'raceList/selector',\n    get: getAllRaces,\n  }),\n});\n\nexport const baseRaceListSelector = selector<Race[]>({\n  key: 'baseRaceList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => !r.base),\n});\n\nexport const raceHeritageListSelector = selector<Heritage[]>({\n  key: 'raceHeritageList/selector',\n  get: ({ get }) => (get(raceListState) as Heritage[]).filter(r => r.base),\n});\n\nexport const raceState = atomFamily<Race, number>({\n  key: 'race/state',\n  default: selectorFamily<Race, number>({\n    key: 'race/selector',\n    get: identifier => ({ get }) => {\n      const allRaces = get(raceListState);\n      const race = allRaces.find(({ id }) => id === identifier);\n\n      if (race) {\n        const base = (race as Heritage).base;\n        if (!base) return race;\n\n        const baseRace = allRaces.find(({ id }) => id === base);\n        return {\n          ...baseRace,\n          ...race,\n        };\n      }\n\n      throw new Error(`No race found with id ${identifier}.`);\n    },\n  }),\n});\n\nexport const racialHeritagesState = atomFamily<Heritage[], number>({\n  key: 'racialHeritages/state',\n  default: selectorFamily<Heritage[], number>({\n    key: 'racialHeritages/selector',\n    get: baseId => ({ get }) => get(raceHeritageListSelector).filter(({ base }) => base === baseId),\n  }),\n});\n","import { Race } from '../models/race';\nimport { races } from './data';\n\nexport const getAllRaces = (): Race[] => [\n  ...races,\n];\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport interface TableCellProps {\n  disabled?: boolean;\n}\n\nexport const TableCell = styled.td<TableCellProps>`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n\n  ${({ disabled }) => disabled && css`\n    border: ${rem(1)} solid #e6e1dd;\n    color: grey;\n    cursor: initial;\n  `}\n`;\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const TableSelect = styled.select`\n  background: transparent;\n  border: 0;\n  width: 100%;\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell, TableCellProps } from '../table';\n\nconst bonusColour = '#969d76';\nconst penaltyColour = '#ba847c';\nconst selectedColour = '#926a82';\n\ninterface ScoreProps extends TableCellProps {\n  bonus?: boolean;\n  penalty?: boolean;\n  selected?: boolean;\n}\n\nconst Score = styled(TableCell)<ScoreProps>`\n  line-height: 1;\n  text-align: center;\n\n  ${({ bonus }) => bonus && css`\n    background: ${bonusColour};\n    color: white;\n  `}\n\n  ${({ penalty }) => penalty && css`\n    background: ${penaltyColour};\n    color: white;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: ${selectedColour};\n    border: ${rem(1)} inset #aca195;\n    color: white;\n  `}\n\n  ${({ bonus, penalty, selected }) => (bonus || penalty) && selected && css`\n    background: -webkit-linear-gradient(\n      145deg, ${bonus ? bonusColour : penaltyColour} 30%, ${selectedColour} 40%\n    );\n  `}\n`;\n\nconst Button = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: ${({ disabled }) => disabled ? 'default' : 'pointer'};\n`;\n\nexport interface AbilityScoreCellProps extends ScoreProps {\n  score: number;\n  onSelect?: () => void;\n}\n\nexport const AbilityScoreCell: FC<AbilityScoreCellProps> = ({\n  score,\n  bonus,\n  penalty,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    penalty={penalty}\n    disabled={disabled}\n    selected={selected}\n    width={20}\n  >\n    <Button\n      disabled={disabled}\n      onClick={() => onSelect && onSelect()}\n      tabIndex={disabled ? -1 : 0}\n    >\n      {score}\n    </Button>\n  </Score>\n);\n","import React, { FC, useCallback, useMemo } from 'react';\n\nimport { Ability, AbilityScores, Build, Race } from '../../../models';\nimport { AbilityScoreCell } from './AbilityScoreCell';\n\nexport interface AbilityScoreCellArrayProps {\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  level: number;\n  race: Race;\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const AbilityScoreCellArray: FC<AbilityScoreCellArrayProps> = ({\n  abilityScores,\n  abilityScoreIncreases,\n  level,\n  race,\n  updateBuild,\n}) => {\n  const {\n    abilityScoreChoiceIncrease: racialLevelOneIncrease = 0,\n    abilityScores: racialAbilityScoreIncreases = {},\n  } = race;\n\n  const changeAbilityScoreIncrease = useCallback((ability: Ability): void => {\n    updateBuild({\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        [level]: ability,\n      },\n    });\n  }, [abilityScoreIncreases, level]);\n\n  const calculateAbilityScore = useCallback((ability: Ability): number => {\n    const racialAbilityIncrease = racialAbilityScoreIncreases[ability] || 0;\n    const levelOneIncrease = abilityScoreIncreases[1] === ability && racialLevelOneIncrease || 0;\n    const regularIncreases = Object.keys(abilityScoreIncreases).filter(key => (\n      key != '1' &&\n      abilityScoreIncreases[key.toString()] === ability\n    )).length;\n\n    return abilityScores[ability] + racialAbilityIncrease + levelOneIncrease + regularIncreases;\n  }, [abilityScores, abilityScoreIncreases, racialLevelOneIncrease, racialAbilityScoreIncreases]);\n\n  const hasBonus = useCallback((ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial > 0) return true;\n    }\n\n    return false;\n  }, [racialAbilityScoreIncreases]);\n\n  const hasPenalty = useCallback((ability: Ability): boolean => {\n    if (level === 1) {\n      const racial = racialAbilityScoreIncreases[ability];\n      if (racial && racial < 0) return true;\n    }\n\n    return false;\n  }, [racialAbilityScoreIncreases]);\n\n  const disabled = useMemo(() => (\n    level % 4 !== 0 && !(!!racialLevelOneIncrease && level === 1)\n  ), [level, racialLevelOneIncrease]);\n\n  return (\n    <>\n      {(Object.keys(abilityScores) as Ability[]).map(ability => disabled\n        ? (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n          />\n        ) : (\n          <AbilityScoreCell\n            key={ability}\n            score={calculateAbilityScore(ability)}\n            bonus={hasBonus(ability)}\n            penalty={hasPenalty(ability)}\n            disabled={disabled}\n            selected={abilityScoreIncreases[level] === ability}\n            onSelect={() => changeAbilityScoreIncrease(ability)}\n          />\n        ),\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Archetype, Class } from '../../../models';\nimport {\n  archetypesState,\n  prestigeClassListSelector,\n  primaryClassListSelector,\n} from '../../../state';\nimport { TableCell, TableSelect } from '../table';\n\nexport interface ClassCellProps {\n  cl: Class;\n  classLevel: number;\n  onChange?: (newClassId: number) => void;\n}\n\nexport const ClassCell: FC<ClassCellProps> = ({ cl, onChange }) => {\n  const { id } = cl;\n  const base = (cl as Archetype).base || id;\n  const primaryClasses = useRecoilValue(primaryClassListSelector);\n  const archetypes = useRecoilValue(archetypesState(base));\n  const prestigeClasses = useRecoilValue(prestigeClassListSelector);\n  const hasArchetypes = archetypes.length > 0;\n\n  return (\n    <>\n      <TableCell width={120}>\n        <TableSelect\n          name=\"class\"\n          value={base}\n          onChange={e => onChange && onChange(parseInt(e.target.value) || id)}\n        >\n          <option />\n          {[...primaryClasses, ...prestigeClasses].map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </TableSelect>\n      </TableCell>\n      <TableCell disabled={!hasArchetypes} width={200}>\n        {hasArchetypes && (\n          <TableSelect\n            name=\"archetype\"\n            value={id}\n            onChange={({ target: { value }}) => onChange && onChange(parseInt(value) || base)}\n          >\n            <option />\n            {archetypes.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </TableSelect>\n        )}\n      </TableCell>\n    </>\n  );\n};\n","import { ClassLevel, Levels } from '../level';\nimport { Prerequisite } from './class.prerequisite';\n\nexport enum BaseAttackBonusProgression {\n  Half = 0.5,\n  Average = 0.75,\n  Full = 1,\n}\n\nexport enum SavingThrowProgression {\n  Low,\n  High,\n  PrestigeLow,\n  PrestigeHigh,\n}\n\nexport interface Class {\n  id: number;\n  name: string;\n  levels: Levels<ClassLevel>;\n  progression: {\n    baseAttackBonus: BaseAttackBonusProgression;\n    fortitude: SavingThrowProgression;\n    reflex: SavingThrowProgression;\n    will: SavingThrowProgression;\n  };\n  prerequisites?: Prerequisite[];\n}\n\nexport interface PrimaryClass extends Class {\n  archetypes: number[];\n}\n\nexport const calculateBaseAttackBonus = (\n  levels: number,\n  progression: BaseAttackBonusProgression,\n): number => Math.floor(levels * progression);\n\nexport const calculateSavingThrowBonus = (\n  levels: number,\n  progression: SavingThrowProgression,\n): number => {\n  switch (progression) {\n    case SavingThrowProgression.Low:\n      return Math.floor(levels / 3);\n\n    case SavingThrowProgression.High:\n      return Math.floor(levels / 2) + 2;\n\n    case SavingThrowProgression.PrestigeLow:\n      return Math.ceil(levels / 2);\n\n    case SavingThrowProgression.PrestigeHigh:\n      return Math.ceil(levels / 3);\n  }\n};\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { calculateBaseAttackBonus, calculateSavingThrowBonus } from '../../../models';\nimport { classListState } from '../../../state';\nimport { TableCell } from '../table';\n\nconst StatCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface StatProgressionArrayProps {\n  classIds: number[];\n}\n\nexport const StatProgressionArray: FC<StatProgressionArrayProps> = ({ classIds }) => {\n  const uniqueClasses = useRecoilValue(classListState).filter(({ id }) => (\n    classIds.includes(id)\n  ));\n\n  const calculateStats = useCallback(() => (\n    uniqueClasses.reduce((stats, { id, progression }) => {\n      const { baseAttackBonus, fortitude, reflex, will } = progression;\n      const classLevels = classIds.filter(classId => id === classId).length;\n      stats.bab += calculateBaseAttackBonus(classLevels, baseAttackBonus);\n      stats.fort += calculateSavingThrowBonus(classLevels, fortitude);\n      stats.ref += calculateSavingThrowBonus(classLevels, reflex);\n      stats.will += calculateSavingThrowBonus(classLevels, will);\n      return stats;\n    }, {\n      bab: 0,\n      fort: 0,\n      ref: 0,\n      will: 0,\n    })\n  ), [classIds, uniqueClasses]);\n\n  const { bab, fort, ref, will } = useMemo(() => calculateStats(), [calculateStats]);\n\n  return (\n    <>\n      <StatCell>\n        {bab}\n      </StatCell>\n      <StatCell>\n        {fort}\n      </StatCell>\n      <StatCell>\n        {ref}\n      </StatCell>\n      <StatCell>\n        {will}\n      </StatCell>\n    </>\n  );\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { AbilityScores, Build, Race } from '../../../models';\nimport { classState } from '../../../state';\nimport { AbilityScoreCellArray } from '../abilityScores';\nimport { ClassCell } from '../class';\nimport { TableCell, TableRow, TableSelect } from '../table';\nimport { StatProgressionArray } from './StatProgressionArray';\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nexport interface LevelRowProps {\n  race: Race;\n  level: number;\n  classId: number;\n  classes: number[];\n  abilityScores: AbilityScores;\n  abilityScoreIncreases: Record<number | string, string>;\n  feats?: {\n    general?: string;\n    bonus1?: string;\n    bonus2?: string;\n  };\n  updateBuild: (data: Partial<Build>) => void;\n}\n\nexport const LevelRow: FC<LevelRowProps> = ({\n  race,\n  level,\n  classId,\n  classes,\n  abilityScores,\n  abilityScoreIncreases,\n  feats: {\n    general,\n    bonus1,\n    bonus2,\n  } = {},\n  updateBuild,\n}) => {\n  const currentClass = useRecoilValue(classState(classId));\n  const changeClass = (newClassId: number) => (\n    updateBuild({ classes: { [level]: newClassId }})\n  );\n\n  const getClassLevel = useCallback(() => (\n    classes.filter(id => id === classId).length\n  ), [classes, classId]);\n\n  const classLevel = useMemo(() => getClassLevel(), [getClassLevel]);\n\n  return (\n    <TableRow>\n      <LevelCell>{level}</LevelCell>\n      <ClassCell cl={currentClass} classLevel={classLevel} onChange={changeClass} />\n      <AbilityScoreCellArray\n        abilityScores={abilityScores}\n        abilityScoreIncreases={abilityScoreIncreases}\n        level={level}\n        race={race}\n        updateBuild={updateBuild}\n      />\n      <TableCell disabled={level % 2 === 0} width={200}>\n        {level % 2 !== 0 && (\n          <TableSelect name=\"generalFeat\">\n            <option>\n              {general}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus1} width={200}>\n        {!!bonus1 && (\n          <TableSelect name=\"bonusFeat1\">\n            <option>\n              {bonus1}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <TableCell disabled={!bonus2}>\n        {!!bonus2 && (\n          <TableSelect name=\"bonusFeat2\">\n            <option>\n              {bonus2}\n            </option>\n          </TableSelect>\n        )}\n      </TableCell>\n      <StatProgressionArray classIds={classes} />\n      <TableCell></TableCell>\n    </TableRow>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Build, Character } from '../../models';\nimport { buildState, raceState } from '../../state';\nimport { LevelRow } from './level';\n\nconst Table = styled.table`\n  width: 100%;\n\n  th {\n    text-align: left;\n  }\n`;\n\nexport interface BuildTableProps {\n  buildId: number;\n  character: Character;\n}\n\nexport const BuildTable: FC<BuildTableProps> = ({ buildId, character }) => {\n  const { abilityScores, race: raceId } = character;\n\n  const [build, setBuild] = useRecoilState(buildState(buildId));\n  const race = useRecoilValue(raceState(raceId));\n\n  if (!build) return null;\n\n  const {\n    abilityScoreIncreases,\n    classes,\n    feats,\n    skills,\n  } = build;\n\n  const updateBuild = useCallback((data: Partial<Build>) => {\n    console.log('Updating build...', data);\n    setBuild({\n      ...build,\n      ...data,\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        ...data.abilityScoreIncreases,\n      },\n      classes: {\n        ...classes,\n        ...data.classes,\n      },\n      feats: {\n        ...feats,\n        ...data.feats,\n      },\n      skills: {\n        ...skills,\n        ...data.skills,\n      },\n    });\n  }, [build, setBuild]);\n\n  const getClassesAtLevel = useCallback((level: number) => (\n    Object.values(classes).slice(0, level)\n  ), [classes]);\n\n  const getAbilityScoreIncreasesAtLevel = useCallback((level: string) => (\n    Object.keys(abilityScoreIncreases).filter(key => (\n      parseInt(key) <= parseInt(level)\n    )).reduce((increases, iLevel) => ({\n      ...increases,\n      [iLevel]: abilityScoreIncreases[iLevel],\n    }), {})\n  ), [abilityScoreIncreases]);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th />\n          <th>Class</th>\n          <th>Archetype</th>\n          <th colSpan={Object.keys(abilityScores).length} />\n          <th>Feats (general)</th>\n          <th colSpan={2}>Feats (bonus)</th>\n          <th>BAB</th>\n          <th>FORT</th>\n          <th>REF</th>\n          <th>WILL</th>\n          <th>Traits</th>\n        </tr>\n      </thead>\n      <tbody>\n        {(Object.entries(classes) as [string, number][]).map((\n          [level, classId],\n        ) => (\n          <LevelRow\n            key={level}\n            race={race}\n            level={parseInt(level)}\n            classId={classId}\n            classes={getClassesAtLevel(parseInt(level))}\n            abilityScores={abilityScores}\n            abilityScoreIncreases={getAbilityScoreIncreasesAtLevel(level)}\n            feats={feats[level]}\n            updateBuild={updateBuild}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select, label {\n    font-family: serif;\n  }\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { Ability, AbilityScores, Character } from '../../models';\nimport { raceState } from '../../state';\nimport { Field } from './Field';\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n`;\n\nexport interface BaseAbilityScoresProps {\n  raceId: number;\n  abilityScores: AbilityScores;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseAbilityScores: FC<BaseAbilityScoresProps> = ({\n  raceId,\n  abilityScores,\n  updateCharacter,\n}) => {\n  const {\n    abilityScores: racialAbilityScoreIncreases,\n  } = useRecoilValue(raceState(raceId));\n\n  const onChange = useCallback((ability: Ability, newValue: number) => {\n    updateCharacter({\n      abilityScores: {\n        ...abilityScores,\n        [ability]: newValue,\n      },\n    });\n  }, [abilityScores, updateCharacter]);\n\n  const getModForAbility = useCallback((ability: Ability): number => (\n    racialAbilityScoreIncreases ? racialAbilityScoreIncreases[ability] || 0 : 0\n  ), [racialAbilityScoreIncreases]);\n\n  const getIncreaseAsString = useCallback((increase: number) => (\n    increase === 0\n      ? ''\n      : increase > 0 ? `+${increase}` : increase\n  ), []);\n\n  return (\n    <AbilityScoresWrapper>\n      {(Object.entries(abilityScores) as [Ability, number][]).map(([ability, score]) => (\n        <Field key={ability} width={40}>\n          <select\n            name={ability}\n            value={score}\n            onChange={e => onChange(ability, parseInt(e.target.value))}\n          >\n            {Array.from({ length: 18 }, (_, n) => n + 1).filter(n => n > 6).map(n => (\n              <option key={n} value={n}>\n                {n}\n              </option>\n            ))}\n          </select>\n          <label htmlFor={ability}>\n            {`${ability.toUpperCase()} ${getIncreaseAsString(getModForAbility(ability))}`}\n          </label>\n        </Field>\n      ))}\n    </AbilityScoresWrapper>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { Heritage } from '../../models';\nimport { baseRaceListSelector, raceState, racialHeritagesState } from '../../state';\nimport { Field } from './Field';\n\nexport interface CharacterRaceProps {\n  raceId: number;\n  onChange: (newRaceId: number) => void;\n}\n\nexport const CharacterRace: FC<CharacterRaceProps> = ({ raceId, onChange }) => {\n  const race = useRecoilValue(raceState(raceId));\n  const base = (race as Heritage).base || raceId;\n  const races = useRecoilValue(baseRaceListSelector);\n  const heritages = useRecoilValue(racialHeritagesState(base));\n  const hasRacialHeritages = heritages.length > 0;\n\n  return (\n    <>\n      <Field>\n        <select\n          name=\"race\"\n          value={base}\n          onChange={({ target: { value }}) => onChange(parseInt(value))}\n        >\n          {races.map(({ id, name }) => (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"race\">Race</label>\n      </Field>\n      {hasRacialHeritages && (\n        <Field>\n          <select\n            name=\"heritage\"\n            value={raceId}\n            onChange={({ target: { value }}) => onChange(parseInt(value) || base)}\n          >\n            <option />\n            {heritages.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n          <label htmlFor=\"heritage\">Heritage</label>\n        </Field>\n      )}\n    </>\n  );\n};\n","import React, { FC, KeyboardEvent, useCallback, useState } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  Character,\n  getAlignmentName,\n  getAlignments,\n} from '../../models';\nimport { BaseAbilityScores } from './BaseAbilityScores';\nimport { CharacterRace } from './CharacterRace';\nimport { Field } from './Field';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name, race } = character;\n\n  const [nameVal, setNameVal] = useState(name);\n\n  const changeRace = useCallback((newRaceId: number) => (\n    updateCharacter({ race: newRaceId })\n  ), [updateCharacter]);\n\n  const handleKeyDown = useCallback((\n    { key }: KeyboardEvent<HTMLInputElement>,\n    data: Partial<Character>,\n  ) => {\n    if (key === 'Enter') updateCharacter(data);\n  }, [updateCharacter]);\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <CharacterRace raceId={race} onChange={changeRace} />\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          value={alignment}\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <BaseAbilityScores\n        raceId={race}\n        abilityScores={abilityScores}\n        updateCharacter={updateCharacter}\n      />\n    </InformationSection>\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { BuildTable } from '../build';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n  const { builds } = character;\n\n  const updateCharacter = useCallback((data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  }, [character, setCharacter]);\n\n  if (!builds || !builds.length) return null;\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <BuildTable buildId={builds[0]} character={character} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\n\nimport { characterListState, selectedCharacterState } from '../state';\n\nexport const Nav: FC = () => {\n  const characters = useRecoilValue(characterListState);\n  const setCharacter = useSetRecoilState(selectedCharacterState);\n\n  return (\n    <nav>\n      {characters.map(({ id, name }) => (\n        <button key={id} onClick={() => setCharacter(id)}>\n          {name}\n        </button>\n      ))}\n    </nav>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\nimport { selectedCharacterState } from '../state';\nimport { Nav } from './Nav';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <Nav />\n    <CharacterSheet id={useRecoilValue(selectedCharacterState)} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}