{"version":3,"sources":["models/alignment.ts","assets/kingmaker.bmp","App/Header.tsx","assets/sheet.jpg","analytics/reportWebVitals.ts","models/class/class.ts","models/class/class.archetype.ts","models/class/base/alchemist.ts","models/class/base/arcanist.ts","models/class/base/barbarian.ts","models/class/base/bard.ts","models/class/base/bloodrager.ts","models/class/base/cavalier.ts","models/class/base/cleric.ts","models/class/base/druid.ts","models/class/base/fighter.ts","models/class/base/hunter.ts","models/class/base/inquisitor.ts","models/class/base/kineticist.ts","models/class/base/magus.ts","models/class/base/monk.ts","models/class/base/oracle.ts","models/class/base/paladin.ts","models/class/base/ranger.ts","models/class/base/rogue.ts","models/class/base/shaman.ts","models/class/base/skald.ts","models/class/base/slayer.ts","models/class/base/sorcerer.ts","models/class/base/warpriest.ts","models/class/base/witch.ts","models/class/base/wizard.ts","models/class/class.prestige.ts","data/characters/index.ts","models/class/prestige/aldoriSwordlord.ts","models/class/prestige/arcaneTrickster.ts","models/class/prestige/assassin.ts","models/class/prestige/dragonDisciple.ts","models/class/prestige/duelist.ts","models/class/prestige/eldritchKnight.ts","models/class/prestige/hellknight.ts","models/class/prestige/hellknightSignifier.ts","models/class/prestige/loremaster.ts","models/class/prestige/mysticTheurge.ts","models/class/prestige/stalwartDefender.ts","models/class/prestige/studentofWar.ts","models/class/prestige/winterWitch.ts","state/character.state.ts","components/table/TableCell.tsx","components/table/AbilityScoreTableCell.tsx","components/table/TableRow.tsx","components/table/CharacterTable.tsx","components/common/Field.tsx","components/sheet/BaseInformation.tsx","components/sheet/CharacterSheet.tsx","App/Main.tsx","App/App.tsx","index.tsx"],"names":["Alignment","Heading","styled","h1","rem","Header","title","onPerfEntry","getAlignmentName","alignment","LG","NG","CG","LN","TN","CN","LE","NE","CE","Class","name","levels","prerequisites","this","Archetype","base","Alchemist","Arcanist","Barbarian","Bard","Bloodrager","Cavalier","Cleric","Druid","Fighter","Hunter","Inquisitor","Kineticist","Magus","Monk","Oracle","Paladin","Ranger","Rogue","Shaman","Skald","Slayer","Sorcerer","Warpriest","Witch","Wizard","PrestigeClass","Seelah","id","abilityScores","strength","dexterity","constitution","intelligence","wisdom","charisma","abilityScoreIncreases","undefined","classes","characterListState","atom","key","default","selector","get","characterState","atomFamily","selectorFamily","identifier","characters","character","find","Error","TableCell","td","Score","bonus","css","disabled","selected","AbilityScoreTableCell","ability","score","onSelect","onClick","width","TableRow","tr","Table","table","LevelCell","ClassCell","CharacterTable","updateCharacter","abilityScoreIncreaseSelected","atLevel","colSpan","Object","keys","length","values","map","cl","i","slice","filter","c","entries","a","n","changeAbilityScoreIncrease","Field","fieldset","unsaved","InformationSection","section","AbilityScoresWrapper","div","BaseInformation","useState","nameVal","setNameVal","type","placeholder","value","onChange","e","target","onKeyDown","data","htmlFor","parseInt","Number","abilityToChange","handleAbilityScoreKeyDown","substr","toUpperCase","Sheet","article","sheet","CharacterSheet","useRecoilState","setCharacter","console","log","MainElement","main","Main","Wrapper","background","Cylinder","App","render","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.5a5b378f.chunk.js","sourcesContent":["export enum Alignment {\n  NA = 0,\n  LG, NG, CG,\n  LN, TN, CN,\n  LE, NE, CE,\n}\n\nexport const getAlignments = (): Alignment[] => (\n  Object.values(Alignment).filter(Number) as Alignment[]\n);\n\nexport const getAlignmentName = (alignment: Alignment): string => {\n  switch (alignment) {\n    case Alignment.LG: return 'Lawful Good';\n    case Alignment.NG: return 'Neutral Good';\n    case Alignment.CG: return 'Chaotic Good';\n    case Alignment.LN: return 'Lawful Neutral';\n    case Alignment.TN: return 'True Neutral';\n    case Alignment.CN: return 'Chaotic Neutral';\n    case Alignment.LE: return 'Lawful Evil';\n    case Alignment.NE: return 'Neutral Evil';\n    case Alignment.CE: return 'Chaotic Evil';\n    default: return 'No Alignment';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/kingmaker.0e9cd0b0.bmp\";","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nconst Heading = styled.h1`\n  color: #e6e2ad;\n  font-size: ${rem(60)};\n  -webkit-text-stroke-width: ${rem(2.5)};\n  -webkit-text-stroke-color: #290a0a;\n`;\n\nexport interface HeaderProps {\n  title?: string;\n}\n\nexport const Header: FC<HeaderProps> = ({\n  title = 'Pretty Good Pathfinder Character Builder',\n}) => (\n  <header>\n    <Heading>{title}</Heading>\n  </header>\n);\n","export default __webpack_public_path__ + \"static/media/sheet.b4667120.jpg\";","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import { ClassLevel, Levels } from '../level';\nimport { Prerequisite } from './class.prerequisite';\n\nexport interface ClassOptions {\n  name: string;\n  levels?: Levels<ClassLevel>;\n  prerequisites?: Prerequisite[];\n}\n\nexport class Class {\n  name: string;\n  levels: Levels<ClassLevel>;\n  prerequisites?: Prerequisite[];\n\n  constructor({ name, levels = [], prerequisites }: ClassOptions) {\n    this.name = name;\n    this.levels = levels;\n    this.prerequisites = prerequisites;\n  }\n}\n","import { Class, ClassOptions } from './class';\n\nexport interface ArchetypeOptions extends ClassOptions {\n  base: Class;\n}\n\nexport class Archetype extends Class {\n  base: Class;\n\n  constructor({ base, name, levels, prerequisites }: ArchetypeOptions) {\n    super({ name, levels, prerequisites });\n    this.base = base;\n  }\n}\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Alchemist = new Class({ name: 'Alchemist' });\n\nexport const Chirurgeon = new Archetype({\n  base: Alchemist,\n  name: 'Chirurgeon',\n});\n\nexport const Grenadier = new Archetype({\n  base: Alchemist,\n  name: 'Grenadier',\n});\n\nexport const IncenseSynthesizer = new Archetype({\n  base: Alchemist,\n  name: 'Incense Synthesizer',\n});\n\nexport const Metamorph = new Archetype({\n  base: Alchemist,\n  name: 'Metamorph',\n});\n\nexport const Preservationist = new Archetype({\n  base: Alchemist,\n  name: 'Preservationist',\n});\n\nexport const Vivisectionist = new Archetype({\n  base: Alchemist,\n  name: 'Vivisectionist',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Arcanist = new Class({ name: 'Arcanist' });\n\nexport const BrownFurTransmuter = new Archetype({\n  base: Arcanist,\n  name: 'Brown Fur Transmuter',\n});\n\nexport const EldritchFont = new Archetype({\n  base: Arcanist,\n  name: 'Eldritch Font',\n});\n\nexport const NatureMage = new Archetype({\n  base: Arcanist,\n  name: 'Nature Mage',\n});\n\nexport const PhantasmalMage = new Archetype({\n  base: Arcanist,\n  name: 'Phantasmal Mage',\n});\n\nexport const UnletteredArcanist = new Archetype({\n  base: Arcanist,\n  name: 'Unlettered Arcanist',\n});\n\nexport const WhiteMage = new Archetype({\n  base: Arcanist,\n  name: 'White Mage',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Barbarian = new Class({ name: 'Barbarian' });\n\nexport const ArmoredHulk = new Archetype({\n  base: Barbarian,\n  name: 'Armored Hulk',\n});\n\nexport const BeastkinBerserker = new Archetype({\n  base: Barbarian,\n  name: 'Beastkin Berserker',\n});\n\nexport const InstinctualWarrior = new Archetype({\n  base: Barbarian,\n  name: 'Instinctual Warrior',\n});\n\nexport const InvulnerableRager = new Archetype({\n  base: Barbarian,\n  name: 'Invulnerable Rager',\n});\n\nexport const MadDog = new Archetype({\n  base: Barbarian,\n  name: 'Mad Dog',\n});\n\nexport const PackRager = new Archetype({\n  base: Barbarian,\n  name: 'Pack Rager',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Bard = new Class({ name: 'Bard' });\n\nexport const Archeologist = new Archetype({\n  base: Bard,\n  name: 'Archeologist',\n});\n\nexport const BeastTamer = new Archetype({\n  base: Bard,\n  name: 'Beast Tamer',\n});\n\nexport const DirgeBard = new Archetype({\n  base: Bard,\n  name: 'Dirge Bard',\n});\n\nexport const FlameDancer = new Archetype({\n  base: Bard,\n  name: 'Flame Dancer',\n});\n\nexport const Thundercaller = new Archetype({\n  base: Bard,\n  name: 'Thundercaller',\n});\n\nexport const TranquilWhisperer = new Archetype({\n  base: Bard,\n  name: 'Tranquil Whisperer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Bloodrager = new Class({ name: 'Bloodrager' });\n\nexport const Bloodrider = new Archetype({\n  base: Bloodrager,\n  name: 'Bloodrider',\n});\n\nexport const Greenrager = new Archetype({\n  base: Bloodrager,\n  name: 'Greenrager',\n});\n\nexport const MixedBloodRager = new Archetype({\n  base: Bloodrager,\n  name: 'Mixed-Blood Rager',\n});\n\nexport const Primalist = new Archetype({\n  base: Bloodrager,\n  name: 'Primalist',\n});\n\nexport const ReformedFiend = new Archetype({\n  base: Bloodrager,\n  name: 'Reformed Fiend',\n});\n\nexport const Spelleater = new Archetype({\n  base: Bloodrager,\n  name: 'Spelleater',\n});\n\nexport const Steelblood = new Archetype({\n  base: Bloodrager,\n  name: 'Steelblood',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Cavalier = new Class({ name: 'Cavalier' });\n\nexport const BeastRider = new Archetype({\n  base: Cavalier,\n  name: 'Beast Rider',\n});\n\nexport const CavalierofthePaw = new Archetype({\n  base: Cavalier,\n  name: 'Cavalier of the Paw',\n});\n\nexport const DiscipleofthePike = new Archetype({\n  base: Cavalier,\n  name: 'Disciple of the Pike',\n});\n\nexport const FearsomeLeader = new Archetype({\n  base: Cavalier,\n  name: 'Fearsome Leader',\n});\n\nexport const Gendarme = new Archetype({\n  base: Cavalier,\n  name: 'Gendarme',\n});\n\nexport const KnightoftheWall = new Archetype({\n  base: Cavalier,\n  name: 'Knight of the Wall',\n});\n\nexport const StandardBearer = new Archetype({\n  base: Cavalier,\n  name: 'Standard Bearer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Cleric = new Class({ name: 'Cleric' });\n\nexport const AngelfireApostle = new Archetype({\n  base: Cleric,\n  name: 'Angelfire Apostle',\n});\n\nexport const Crusader = new Archetype({\n  base: Cleric,\n  name: 'Crusader',\n});\n\nexport const DevilbanePriest = new Archetype({\n  base: Cleric,\n  name: 'Devilbane Priest',\n});\n\nexport const Ecclesitheurge = new Archetype({\n  base: Cleric,\n  name: 'Ecclesitheurge',\n});\n\nexport const HeraldCaller = new Archetype({\n  base: Cleric,\n  name: 'Herald Caller',\n});\n\nexport const PriestofBalance = new Archetype({\n  base: Cleric,\n  name: 'Priest of Balance',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Druid = new Class({ name: 'Druid' });\n\nexport const BlightDruid = new Archetype({\n  base: Druid,\n  name: 'Blight Druid',\n});\n\nexport const DefenderoftheTrueWorld = new Archetype({\n  base: Druid,\n  name: 'Defender of the True World',\n});\n\nexport const Drovier = new Archetype({\n  base: Druid,\n  name: 'Drovier',\n});\n\nexport const ElementalRampager = new Archetype({\n  base: Druid,\n  name: 'Elemental Rampager',\n});\n\nexport const Feyspeaker = new Archetype({\n  base: Druid,\n  name: 'Feyspeaker',\n});\n\nexport const PrimalDruid = new Archetype({\n  base: Druid,\n  name: 'Primal Druid',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Fighter = new Class({ name: 'Fighter' });\n\nexport const AldoriDefender = new Archetype({\n  base: Fighter,\n  name: 'Aldori Defender',\n});\n\nexport const Armiger = new Archetype({\n  base: Fighter,\n  name: 'Armiger',\n});\n\nexport const DragonhearScion = new Archetype({\n  base: Fighter,\n  name: 'Dragonhear Scion',\n});\n\nexport const MutationWarrior = new Archetype({\n  base: Fighter,\n  name: 'Mutation Warrior',\n});\n\nexport const TowerShieldSpecialist = new Archetype({\n  base: Fighter,\n  name: 'Tower Shield Specialist',\n});\n\nexport const TwoHandedFighter = new Archetype({\n  base: Fighter,\n  name: 'Two-Handed Fighter',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Hunter = new Class({ name: 'Hunter' });\n\nexport const ColludingScoundrel = new Archetype({\n  base: Hunter,\n  name: 'Colluding Scoundrel',\n});\n\nexport const DivineHound = new Archetype({\n  base: Hunter,\n  name: 'Divine Hound',\n});\n\nexport const DivineHunter = new Archetype({\n  base: Hunter,\n  name: 'Divine Hunter',\n});\n\nexport const Forester = new Archetype({\n  base: Hunter,\n  name: 'Forester',\n});\n\nexport const UrbanHunter = new Archetype({\n  base: Hunter,\n  name: 'Urban Hunter',\n});\n\nexport const WanderingMarksman = new Archetype({\n  base: Hunter,\n  name: 'Wandering Marksman',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Inquisitor = new Class({ name: 'Inquisitor' });\n\nexport const FaithHunter = new Archetype({\n  base: Inquisitor,\n  name: 'Faith Hunter',\n});\n\nexport const Judge = new Archetype({\n  base: Inquisitor,\n  name: 'Judge',\n});\n\nexport const MonsterTactician = new Archetype({\n  base: Inquisitor,\n  name: 'Monster Tactician',\n});\n\nexport const SacredHuntsmaster = new Archetype({\n  base: Inquisitor,\n  name: 'Sacred Huntsmaster',\n});\n\nexport const SactifiedSlayer = new Archetype({\n  base: Inquisitor,\n  name: 'Sactified Slayer',\n});\n\nexport const TacticalLeader = new Archetype({\n  base: Inquisitor,\n  name: 'Tactical Leader',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Kineticist = new Class({ name: 'Kineticist' });\n\nexport const BloodKineticist = new Archetype({\n  base: Kineticist,\n  name: 'Blood Kineticist',\n});\n\nexport const DarkElementalist = new Archetype({\n  base: Kineticist,\n  name: 'Dark Elementalist',\n});\n\nexport const ElementalEngine = new Archetype({\n  base: Kineticist,\n  name: 'Elemental Engine',\n});\n\nexport const KineticKnight = new Archetype({\n  base: Kineticist,\n  name: 'Kinetic Knight',\n});\n\nexport const OverwhelmingSoul = new Archetype({\n  base: Kineticist,\n  name: 'Overwhelming Soul',\n});\n\nexport const Psychokineticist = new Archetype({\n  base: Kineticist,\n  name: 'Psychokineticist',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Magus = new Class({ name: 'Magus' });\n\nexport const ArcaneRider = new Archetype({\n  base: Magus,\n  name: 'Arcane Rider',\n});\n\nexport const ArmoredBattlemage = new Archetype({\n  base: Magus,\n  name: 'Armored Battlemage',\n});\n\nexport const EldritchArcher = new Archetype({\n  base: Magus,\n  name: 'Eldritch Archer',\n});\n\nexport const EldritchScion = new Archetype({\n  base: Magus,\n  name: 'Eldritch Scion',\n});\n\nexport const Hexcrafter = new Archetype({\n  base: Magus,\n  name: 'Hexcrafter',\n});\n\nexport const SpellDancer = new Archetype({\n  base: Magus,\n  name: 'Spell Dancer',\n});\n\nexport const SwordSaint = new Archetype({\n  base: Magus,\n  name: 'Sword Saint',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Monk = new Class({ name: 'Monk' });\n\nexport const QuarterstaffMaster = new Archetype({\n  base: Monk,\n  name: 'Quarterstaff Master',\n});\n\nexport const ScaledFist = new Archetype({\n  base: Monk,\n  name: 'Scaled Fist',\n});\n\nexport const Sensei = new Archetype({\n  base: Monk,\n  name: 'Sensei',\n});\n\nexport const Sohei = new Archetype({\n  base: Monk,\n  name: 'Sohei',\n});\n\nexport const StudentofStone = new Archetype({\n  base: Monk,\n  name: 'Student of Stone',\n});\n\nexport const TraditionalMonk = new Archetype({\n  base: Monk,\n  name: 'Traditional Monk',\n});\n\nexport const ZenArcher = new Archetype({\n  base: Monk,\n  name: 'Zen Archer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Oracle = new Class({ name: 'Oracle' });\n\nexport const DivineHerbalist = new Archetype({\n  base: Oracle,\n  name: 'Divine Herbalist',\n});\n\nexport const EnlightenedPhilosopher = new Archetype({\n  base: Oracle,\n  name: 'Enlightened Philosopher',\n});\n\nexport const LoneStrider = new Archetype({\n  base: Oracle,\n  name: 'Lone Strider',\n});\n\nexport const PossessedOracle = new Archetype({\n  base: Oracle,\n  name: 'Possessed Oracle',\n});\n\nexport const Purifier = new Archetype({\n  base: Oracle,\n  name: 'Purifier',\n});\n\nexport const Seeker = new Archetype({\n  base: Oracle,\n  name: 'Seeker',\n});\n\nexport const WindWhisperer = new Archetype({\n  base: Oracle,\n  name: 'Wind Whisperer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Paladin = new Class({ name: 'Paladin' });\n\nexport const DivineGuardian = new Archetype({\n  base: Paladin,\n  name: 'Divine Guardian',\n});\n\nexport const DivineHunter_Paladin = new Archetype({\n  base: Paladin,\n  name: 'Divine Hunter',\n});\n\nexport const DivineScion = new Archetype({\n  base: Paladin,\n  name: 'Divine Scion',\n});\n\nexport const Hospitaler = new Archetype({\n  base: Paladin,\n  name: 'Hospitaler',\n});\n\nexport const Martyr = new Archetype({\n  base: Paladin,\n  name: 'Martyr',\n});\n\nexport const Stonelord = new Archetype({\n  base: Paladin,\n  name: 'Stonelord',\n});\n\nexport const WarrioroftheHolyLight = new Archetype({\n  base: Paladin,\n  name: 'Warrior of the Holy Light',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Ranger = new Class({ name: 'Ranger' });\n\nexport const Demonslayer = new Archetype({\n  base: Ranger,\n  name: 'Demonslayer',\n});\n\nexport const EspionageExpert = new Archetype({\n  base: Ranger,\n  name: 'Espionage Expert',\n});\n\nexport const Flamewarden = new Archetype({\n  base: Ranger,\n  name: 'Flamewarden',\n});\n\nexport const Freebooter = new Archetype({\n  base: Ranger,\n  name: 'Freebooter',\n});\n\nexport const Nomad = new Archetype({\n  base: Ranger,\n  name: 'Nomad',\n});\n\nexport const Stormwalker = new Archetype({\n  base: Ranger,\n  name: 'Stormwalker',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Rogue = new Class({ name: 'Rogue' });\n\nexport const EldritchScoundrel = new Archetype({\n  base: Rogue,\n  name: 'Eldritch Scoundrel',\n});\n\nexport const KnifeMaster = new Archetype({\n  base: Rogue,\n  name: 'Knife Master',\n});\n\nexport const MasterofAll = new Archetype({\n  base: Rogue,\n  name: 'Master of All',\n});\n\nexport const Rowdy = new Archetype({\n  base: Rogue,\n  name: 'Rowdy',\n});\n\nexport const SylvanTrickster = new Archetype({\n  base: Rogue,\n  name: 'Sylvan Trickster',\n});\n\nexport const Thug = new Archetype({\n  base: Rogue,\n  name: 'Thug',\n});\n\nexport const UndergroundChemist = new Archetype({\n  base: Rogue,\n  name: 'Underground Chemist',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Shaman = new Class({ name: 'Shaman' });\n\nexport const PossessedShaman = new Archetype({\n  base: Shaman,\n  name: 'Possessed Shaman',\n});\n\nexport const ShadowShaman = new Archetype({\n  base: Shaman,\n  name: 'Shadow Shaman',\n});\n\nexport const SpiritHunter = new Archetype({\n  base: Shaman,\n  name: 'Spirit Hunter',\n});\n\nexport const SpiritWarden = new Archetype({\n  base: Shaman,\n  name: 'Spirit Warden',\n});\n\nexport const UnswornShaman = new Archetype({\n  base: Shaman,\n  name: 'Unsworn Shaman',\n});\n\nexport const WildlandShaman = new Archetype({\n  base: Shaman,\n  name: 'Wildland Shaman',\n});\n\nexport const WitchDoctor = new Archetype({\n  base: Shaman,\n  name: 'Witch Doctor',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Skald = new Class({ name: 'Skald' });\n\nexport const BattleScion = new Archetype({\n  base: Skald,\n  name: 'Battle Scion',\n});\n\nexport const BattleSinger = new Archetype({\n  base: Skald,\n  name: 'Battle Singer',\n});\n\nexport const CourtPoet = new Archetype({\n  base: Skald,\n  name: 'Court Poet',\n});\n\nexport const DemonDancer = new Archetype({\n  base: Skald,\n  name: 'Demon Dancer',\n});\n\nexport const HeraldoftheHorn = new Archetype({\n  base: Skald,\n  name: 'Herald of the Horn',\n});\n\nexport const HuntCaller = new Archetype({\n  base: Skald,\n  name: 'Hunt Caller',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Slayer = new Class({ name: 'Slayer' });\n\nexport const ArcaneEnforcer = new Archetype({\n  base: Slayer,\n  name: 'Arcane Enforcer',\n});\n\nexport const Deliverer = new Archetype({\n  base: Slayer,\n  name: 'Deliverer',\n});\n\nexport const Executioner = new Archetype({\n  base: Slayer,\n  name: 'Executioner',\n});\n\nexport const Imitator = new Archetype({\n  base: Slayer,\n  name: 'Imitator',\n});\n\nexport const SpawnSlayer = new Archetype({\n  base: Slayer,\n  name: 'Spawn Slayer',\n});\n\nexport const StygianSlayer = new Archetype({\n  base: Slayer,\n  name: 'Stygian Slayer',\n});\n\nexport const Vanguard = new Archetype({\n  base: Slayer,\n  name: 'Vanguard',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Sorcerer = new Class({ name: 'Sorcerer' });\n\nexport const Crossblooded = new Archetype({\n  base: Sorcerer,\n  name: 'Crossblooded',\n});\n\nexport const EmpyrealSorcerer = new Archetype({\n  base: Sorcerer,\n  name: 'Empyreal Sorcerer',\n});\n\nexport const NineTailedHeir = new Archetype({\n  base: Sorcerer,\n  name: 'Nine Tailed Heir',\n});\n\nexport const OverwhelmingMage = new Archetype({\n  base: Sorcerer,\n  name: 'Overwhelming Mage',\n});\n\nexport const SageSorcerer = new Archetype({\n  base: Sorcerer,\n  name: 'Sage Sorcerer',\n});\n\nexport const SeekerSorcerer = new Archetype({\n  base: Sorcerer,\n  name: 'Seeker',\n});\n\nexport const SylvanSorcerer = new Archetype({\n  base: Sorcerer,\n  name: 'Sylvan Sorcerer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Warpriest = new Class({ name: 'Warpriest' });\n\nexport const ChampionoftheFaith = new Archetype({\n  base: Warpriest,\n  name: 'Champion of the Faith',\n});\n\nexport const CultLeader = new Archetype({\n  base: Warpriest,\n  name: 'Cult Leader',\n});\n\nexport const Disenchanter = new Archetype({\n  base: Warpriest,\n  name: 'Disenchanter',\n});\n\nexport const FeralChampion = new Archetype({\n  base: Warpriest,\n  name: 'Feral Champion',\n});\n\nexport const Proclaimer = new Archetype({\n  base: Warpriest,\n  name: 'Proclaimer',\n});\n\nexport const Shieldbearer = new Archetype({\n  base: Warpriest,\n  name: 'Shieldbearer',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Witch = new Class({ name: 'Witch' });\n\nexport const ElementalWitch = new Archetype({\n  base: Witch,\n  name: 'Elemental Witch',\n});\n\nexport const Hagbound = new Archetype({\n  base: Witch,\n  name: 'Hagbound',\n});\n\nexport const HexChanneler = new Archetype({\n  base: Witch,\n  name: 'Hex Channeler',\n});\n\nexport const LeyLineGuardian = new Archetype({\n  base: Witch,\n  name: 'Ley Line Guardian',\n});\n\nexport const StigmatizedWitch = new Archetype({\n  base: Witch,\n  name: 'Archeologist',\n});\n\nexport const WitchoftheVeil = new Archetype({\n  base: Witch,\n  name: 'Witch of the Veil',\n});\n","import { Class } from '../class';\nimport { Archetype } from '../class.archetype';\n\nexport const Wizard = new Class({ name: 'Wizard' });\n\nexport const ArcaneBomber = new Archetype({\n  base: Wizard,\n  name: 'Arcane Bomber',\n});\n\nexport const Cruromancer = new Archetype({\n  base: Wizard,\n  name: 'Cruromancer',\n});\n\nexport const ElementalSpecialist = new Archetype({\n  base: Wizard,\n  name: 'Elemental Specialist',\n});\n\nexport const ExploiterWizard = new Archetype({\n  base: Wizard,\n  name: 'Exploiter Wizard',\n});\n\nexport const ScrollSavant = new Archetype({\n  base: Wizard,\n  name: 'Scroll Savant',\n});\n\nexport const SpellMaster = new Archetype({\n  base: Wizard,\n  name: 'Spell Master',\n});\n\nexport const ThassilonianSpecialist = new Archetype({\n  base: Wizard,\n  name: 'Thassilonian Specialist',\n});\n","import { Class, ClassOptions } from './class';\nimport { Prerequisite } from './class.prerequisite';\n\nexport interface PrestigeClassOptions extends ClassOptions {\n  prerequisites: Prerequisite[];\n}\n\nexport class PrestigeClass extends Class {\n  prerequisites: Prerequisite[];\n\n  constructor({ name, levels, prerequisites }: PrestigeClassOptions) {\n    super({ name, levels });\n    this.prerequisites = prerequisites;\n  }\n}\n","import { Alignment, PremadeCharacter } from '../../models';\n\nconst Seelah: PremadeCharacter = {\n  id: 0,\n  name: 'Seelah',\n  abilityScores: {\n    strength: 16,\n    dexterity: 13,\n    constitution: 14,\n    intelligence: 10,\n    wisdom: 13,\n    charisma: 15,\n  },\n  abilityScoreIncreases: {\n    4: 'charisma',\n    8: 'strength',\n    12: 'strength',\n    16: undefined,\n    20: undefined,\n  },\n  alignment: Alignment.LG,\n  classes: [\n    'Paladin',\n    'Ranger',\n    'Ranger',\n    'Paladin',\n    'Paladin',\n    'Cavalier',\n    'Cavalier',\n    'Paladin',\n    'Paladin',\n    'Paladin',\n    'Paladin',\n    'Warpriest',\n  ],\n};\n\nexport const getAllCharacters = (): PremadeCharacter[] => [Seelah];\n","import { PrestigeClass } from '../class.prestige';\n\nexport const AldoriSwordlord = new PrestigeClass({\n  name: 'Aldori Swordlord',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const ArcaneTrickster = new PrestigeClass({\n  name: 'Arcane Trickster',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const Assassin = new PrestigeClass({\n  name: 'Assassin',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const DragonDisciple = new PrestigeClass({\n  name: 'Dragon Disciple',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const Duelist = new PrestigeClass({\n  name: 'Duelist',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const EldritchKnight = new PrestigeClass({\n  name: 'Eldritch Knight',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const Hellknight = new PrestigeClass({\n  name: 'Hellknight',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const HellknightSignifier = new PrestigeClass({\n  name: 'Hellknight Signifier',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const Loremaster = new PrestigeClass({\n  name: 'Loremaster',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const MysticTheurge = new PrestigeClass({\n  name: 'Mystic Theurge',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const StalwartDefender = new PrestigeClass({\n  name: 'Stalwart Defender',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const StudentofWar = new PrestigeClass({\n  name: 'Student of War',\n  levels: [],\n  prerequisites: [],\n});\n","import { PrestigeClass } from '../class.prestige';\n\nexport const WinterWitch = new PrestigeClass({\n  name: 'Winter Witch',\n  levels: [],\n  prerequisites: [],\n});\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\n\nimport { getAllCharacters } from '../data';\nimport { Character } from '../models';\n\nexport const characterListState = atom<Character[]>({\n  key: 'characterList/state',\n  default: selector<Character[]>({\n    key: 'characterList/selector',\n    get: getAllCharacters,\n  }),\n});\n\nexport const characterState = atomFamily<Character, number | string>({\n  key: 'character/state',\n  default: selectorFamily<Character, number | string>({\n    key: 'character/selector',\n    get: identifier => ({ get }) => {\n      const characters = get(characterListState);\n      const character = typeof identifier === 'string'\n        ? characters.find(({ name }) => name === identifier)\n        : characters[identifier];\n\n      if (character) return character;\n\n      throw new Error(`Identifier ${identifier} does not correspond to a character`);\n    },\n  }),\n});\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nexport const TableCell = styled.td`\n  background: #ede0b6;\n  border: ${rem(1)} solid #cdc0a6;\n`;\n","import React, { FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nimport { Ability } from '../../models';\nimport { TableCell } from './TableCell';\n\nconst Score = styled(TableCell)<{ bonus?: boolean, disabled?: boolean, selected?: boolean }>`\n  cursor: pointer;\n  text-align: center;\n\n  ${({ bonus }) => bonus && css`\n    background: #cdc0a6;\n  `}\n\n  ${({ disabled }) => disabled && css`\n    color: grey;\n    cursor: initial;\n  `}\n\n  ${({ selected }) => selected && css`\n    background: #9b9b99;\n    border: ${rem(1)} solid #a5a56a;\n  `}\n\n  ${({ bonus, selected }) => bonus && selected && css`\n    background: -webkit-linear-gradient(145deg, #cdc0a6 30%, #9b9b99 40%);\n  `}\n`;\n\nexport interface AbilityScoreTableCellProps {\n  ability: Ability;\n  score: number;\n  bonus?: boolean;\n  disabled?: boolean;\n  selected?: boolean;\n  onSelect?: (ability: Ability) => void;\n}\n\nexport const AbilityScoreTableCell: FC<AbilityScoreTableCellProps> = ({\n  ability,\n  score,\n  bonus,\n  disabled,\n  selected,\n  onSelect,\n}) => (\n  <Score\n    bonus={bonus}\n    disabled={disabled}\n    selected={selected}\n    onClick={() => onSelect && onSelect(ability)}\n    width={20}\n  >\n    {score}\n  </Score>\n);\n","import styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { TableCell } from './TableCell';\n\nexport const TableRow = styled.tr`\n  &:first-child {\n    border-radius: ${rem(20)};\n    /* border-radius: ${rem(20)} 0 0 0; */\n\n    ${TableCell}:first-child {\n      border-radius: ${rem(6)} 0 0 0;\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 ${rem(6)} 0 0;\n    }\n  }\n\n  &:last-child {\n    ${TableCell}:first-child {\n      border-radius: 0 0 0 ${rem(6)};\n    }\n\n    ${TableCell}:last-child {\n      border-radius: 0 0 ${rem(6)} 0;\n    }\n  }\n`;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport { Ability, Character, PremadeCharacter } from '../../models';\nimport { AbilityScoreTableCell } from './AbilityScoreTableCell';\nimport { TableCell } from './TableCell';\nimport { TableRow } from './TableRow';\n\nconst Table = styled.table`\n  width: 100%;\n`;\n\nconst LevelCell = styled(TableCell)`\n  text-align: center;\n  width: ${rem(25)};\n`;\n\nconst ClassCell = styled(TableCell)`\n  width: ${rem(220)};\n`;\n\nexport interface CharacterTableProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const CharacterTable: FC<CharacterTableProps> = ({ character, updateCharacter }) => {\n  const {\n    abilityScores,\n    abilityScoreIncreases,\n    classes,\n  } = character as PremadeCharacter; // TODO: don't cast\n\n  const countAbilityScoreIncreases = (ability: string, atLevel: number): number => (\n      [4, 8, 12, 16, 20].filter(n => n <= atLevel) as (4 | 8 | 12 | 16 | 20)[]\n  ).filter(key => abilityScoreIncreases[key] === ability).length;\n\n  const abilityScoreIncreaseSelected = (ability: string, atLevel: number): boolean => (\n    abilityScoreIncreases[atLevel] === ability\n  );\n\n  const changeAbilityScoreIncrease = (ability: Ability, atLevel: number): void => {\n    updateCharacter({\n      abilityScoreIncreases: {\n        ...abilityScoreIncreases,\n        [atLevel]: ability,\n      },\n    });\n  };\n\n  return (\n    <Table>\n      <thead>\n        <th></th>\n        <th>Class</th>\n        <th colSpan={Object.keys(abilityScores).length} />\n        <th>Details</th>\n      </thead>\n      <tbody>\n        {Object.values(classes).map((cl, i) => (\n          <TableRow key={`${cl}-${i}`}>\n            <LevelCell>{i + 1}</LevelCell>\n            <ClassCell>\n              {`${cl} (${classes.slice(0, i + 1).filter(c => c === cl).length})`}\n            </ClassCell>\n            {Object.entries(abilityScores).map(([a, score]) => (\n              <AbilityScoreTableCell\n                key={a}\n                ability={a as Ability}\n                score={score + countAbilityScoreIncreases(a, i + 1)}\n                disabled={(i + 1) % 4 !== 0}\n                selected={(i + 1) % 4 === 0 && abilityScoreIncreaseSelected(a, i + 1)}\n                onSelect={ability => changeAbilityScoreIncrease(ability, i + 1)}\n              />\n            ))}\n            <TableCell></TableCell>\n          </TableRow>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import styled, { css } from 'styled-components';\nimport { rem } from 'polished';\n\nexport const Field = styled.fieldset<{ unsaved?: boolean, width?: number }>`\n  display: flex;\n  flex-direction: column;\n\n  border: 0;\n  margin: 0;\n\n  width: 0%;\n\n  input, select {\n    background: none;\n    border: none;\n    border-bottom: ${rem(1)} dotted #290a0a;\n\n    font-family: cursive;\n    font-size: ${rem(16)};\n\n    width: ${({ width = 100 }) => rem(width)};\n  }\n\n  label {\n    font-family: serif;\n    font-size: ${rem(8)};\n  }\n\n  ${({ unsaved }) => unsaved && css`\n    color: red;\n\n    input, select {\n      border-bottom: ${rem(1)} solid red; \n    }\n  `}\n`;\n","import React, { FC, KeyboardEvent, useState } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  Ability,\n  Character,\n  getAlignmentName,\n  getAlignments,\n  PremadeCharacter,\n} from '../../models';\nimport { Field } from '../common';\n\nconst InformationSection = styled.section`\n  display: flex;\n`;\n\nconst AbilityScoresWrapper = styled.div`\n  display: flex;\n  \n  input {\n    text-align: center;\n  }\n`;\n\nexport interface BaseInformationProps {\n  character: Character;\n  updateCharacter: (data: Partial<Character>) => void;\n}\n\nexport const BaseInformation: FC<BaseInformationProps> = ({\n  character,\n  updateCharacter,\n}) => {\n  const { abilityScores, alignment, name } = character as PremadeCharacter;\n  const [nameVal, setNameVal] = useState(name);\n\n  const handleKeyDown = ({ key }: KeyboardEvent<HTMLInputElement>, data: Partial<Character>) => {\n    if (key === 'Enter') updateCharacter(data);\n  };\n\n  const handleAbilityScoreKeyDown = (\n    { key }: KeyboardEvent<HTMLInputElement>,\n    abilityToChange: Ability,\n  ) => {\n    if (key === 'ArrowUp' || key === 'ArrowRight') {\n      updateCharacter({\n        abilityScores: {\n          ...abilityScores,\n          [abilityToChange]: abilityScores[abilityToChange] + 1,\n        },\n      });\n    }\n\n    if (key === 'ArrowDown' || key === 'ArrowLeft') {\n      updateCharacter({\n        abilityScores: {\n          ...abilityScores,\n          [abilityToChange]: abilityScores[abilityToChange] - 1,\n        },\n      });\n    }\n  };\n\n  return (\n    <InformationSection>\n      <Field unsaved={name !== nameVal} width={200}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Character name\"\n          value={nameVal}\n          onChange={e => setNameVal(e.target.value)}\n          onKeyDown={e => handleKeyDown(e, { name: (e.target as HTMLInputElement).value })}\n        />\n        <label htmlFor=\"name\">Name</label>\n      </Field>\n      <Field width={120}>\n        <select\n          name=\"alignment\"\n          onChange={e => updateCharacter({ alignment: parseInt(e.target.value) })}\n        >\n          {getAlignments().map(a => (\n            <option key={a} value={a} selected={a === alignment}>\n              {getAlignmentName(a)}\n            </option>\n          ))}\n        </select>\n        <label htmlFor=\"alignment\">Alignment</label>\n      </Field>\n      <AbilityScoresWrapper>\n        {Object.entries(abilityScores).map(([a, score]) => (\n          <Field key={a} width={20}>\n            <input\n              type=\"numeric\"\n              name={a}\n              value={score}\n              onKeyDown={e => handleAbilityScoreKeyDown(e, a as Ability)}\n            />\n            <label htmlFor={a}>{a.substr(0, 3).toUpperCase()}</label>\n          </Field>\n        ))}\n      </AbilityScoresWrapper>\n    </InformationSection>\n  );\n};\n","import React, { FC } from 'react';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport sheet from '../../assets/sheet.jpg';\nimport { Character } from '../../models';\nimport { characterState } from '../../state';\nimport { CharacterTable } from '../table';\nimport { BaseInformation } from './BaseInformation';\n\nconst Sheet = styled.article`\n  display: flex;\n  flex-direction: column;\n\n  background-image: url(${sheet});\n  box-shadow: 0 0 ${rem(8)} 0;\n  border-radius: ${rem(8)};\n  opacity: 0.95;\n\n  padding: ${rem(16)};\n  width: 100%;\n\n  font-family: cursive;\n`;\n\nexport interface CharacterSheetProps {\n  id: number;\n}\n\nexport const CharacterSheet: FC<CharacterSheetProps> = ({ id }) => {\n  const [character, setCharacter] = useRecoilState(characterState(id));\n\n  const updateCharacter = (data: Partial<Character>) => {\n    console.log('Updating character...', data);\n    setCharacter({\n      ...character,\n      ...data,\n    });\n  };\n\n  return (\n    <Sheet>\n      <BaseInformation character={character} updateCharacter={updateCharacter} />\n      <CharacterTable character={character} updateCharacter={updateCharacter} />\n    </Sheet>\n  );\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nimport { CharacterSheet } from '../components';\n\nconst MainElement = styled.main`\n  width: 100%;\n`;\n\nexport const Main: FC = () => (\n  <MainElement>\n    <CharacterSheet id={0} />\n  </MainElement>\n);\n","import React, { FC } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport styled from 'styled-components';\nimport { rem } from 'polished';\n\nimport background from '../assets/kingmaker.bmp';\nimport { Header } from './Header';\nimport { Main } from './Main';\n\nconst Wrapper = styled.div`\n  background-image: url(${background});\n\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  margin: 0;\n`;\n\nconst Cylinder = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: ${rem(1660)};\n`;\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <Wrapper>\n      <Cylinder>\n        <Header />\n        <Main />\n      </Cylinder>\n    </Wrapper>\n  </RecoilRoot>\n);\n","import React, { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\nimport { reportWebVitals } from './analytics';\nimport { App } from './App';\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}